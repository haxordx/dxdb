{
  "openapi": "3.0.3",
  "info": {
    "description": "## Financial Advisory via API  \n\nWelcome to the riskine API! The API is behind every riskine solution. It is the core of riskine's intelligence. We encapsulate different parts of financial advisory into microservices, based on user data, statistical data, external data, realtime data, algorithms, knowledge graphs, and AI. They are combined and fused together to form a bigger picture - the advisory core. The API exposes microservices for clients to consume and interact with this core in bite-sized pieces. This allows us to flexibly support use cases spanning over the entire financial advisory spectrum. ![api overview](img/api-overview.png \"API Overview\")  \n\nThere are two usage patterns for the API: full advisory and calculator-like. In the schematic overview above, this is represented by the riskine Advisory making connections to many microservices and the riskine API accessing one microservice directly.  \n\n - __Full Advisory:__ This is the main usage pattern. API clients create an advisory session and interact with the API service-by-service. The riskine core patches together data from the user, estimations, calculations, and external services to create a holistic advisory. API clients can then get the enriched data and results, or react to conclusion webhooks as explained in the integration section. _For example, you could start adding a person and their income to the advisory. Pension benefits and associated risks would be automatically estimated in the core based on scenarios. You could get that from the API and render it for the user. With a few more inputs, the risk preference could be set. Afterward, you could answer advisory questions from the API like \"Should I start saving money, if yes why and how much is recommended?\"_\n - __Calculator-Like:__ For simple use cases, you might want to use services without reference to an advisory. For example, the state benefits service can be accessed directly in a single request if the goal is to just calculate state benefits without reference to a bigger picture. This way, integration is simpler.  \n\n ## Private Lines and Business Lines \nThere are riskine advisory solutions available to advise private persons and business entities. The API is not strictly divided into private lines and business lines microservices, as there is an overlap. However, there are certain services that can be parameterized to deliver either private or business content: `accountType=sme|private`. There are also services that are designed specifically for either of the two.  \n\n ## Ontology and Data Model \nAs core and basis for the data objects in the API, we utilize schemas in the [Open Insurance Ontology](https://github.com/riskine/ontology) which we are maintaining as open-source on GitHub. Building upon its core schemas, we can ensure that data from all subdomains works together and creates a cohesive bigger picture. Find more detailed documentation [here](https://schema.riskine.com/). ![ontology](/img/ontology.png)  \n\n## Countries and Languages  \nThe riskine API is designed to work the same in all countries, but it differs in content. For example, each country has a unique tax system which in turn influences recommendations. There are two localization dynamics: API content may vary in countries and additionally in different languages. \n\n - __Countries__: Country-specific finance logic is embedded in our core for each country that we cover (Germany `de`, Austria `at`, Switzerland `ch`, Spain `es`, Italy `it`, Netherlands `nl`, Japan `jp`). Define the country for your request via the URL parameter `country`.\n - __Languages__: For services with language content as text, the language is controlled via the URL parameter `locale`, for example, `locale=de`, `locale=en`, `locale=es`, ...",
    "version": "1.326.0",
    "title": "riskine API",
    "contact": {
      "email": "office@riskine.com"
    },
    "x-logo": {
      "url": "img/logo3.png",
      "backgroundColor": "#FFFFFF",
      "altText": "riskine API"
    }
  },
  "servers": [
    {
      "url": "https://api.riskine.com"
    }
  ],
  "tags": [
    {
      "name": "Integration",
      "description": "There are two usage patterns for the API: Full Advisory and Calculator-Like. They differ slightly in the integration mechanic. For every interaction, an API token is needed - see [Get Token](#tag/Integration/paths/~1gettoken/get). In the following, Full Advisory Integration is described. Calculator-Like integration is just directly calling services.  ![API integration 1](img/api-integration1.png)  \n\n First, create an advisory via [Create Advisory](#tag/Integration/paths/~1advisories~1{externalId}/post) and optionally prefill data. The `externalId` serves as a freely chosen identifier for your advisory session. If the riskine app is used, the response will contain a redirection URL which redirects to the advisory solution with the prefilled data. ![API integration 3](img/api-integration3.png)  \n\n When an advisory is concluded, it is possible to just [get](#tag/Integration/paths/~1advisories~1{externalId}/get) and/or [delete](http://localhost:1042/#tag/Integration/paths/~1advisories~1{externalId}/delete) the advisory data. ![API integration 2](img/api-integration2.png)  \n\n An advisory can also be concluded via callbacks. There are 3 callbacks: Redirections (for example, to redirect users back into your system), Save Triggers (for example, to ping your system to perform some actions, then get the advisory data and save it) and E-Mail callbacks (for example, to send a request for a human advisory to your mailserver). These callbacks are part of the configuration, but can also be dynamically set."
    },
    {
      "name": "Risks",
      "description": "We define 8 life risks at the center of our lifecycle model. To analyze a user's risks we consider probabilities and damage parameters. The calculations are __based on statistical data from public, private, and proprietary sources, as well as proprietary risk models__. These services give access to the calculated risks, damage estimations, and supplementary parameters. The 8 life risks are health, accident, pension gap, natural catastrophe, unemployment, crime, death, legal."
    },
    {
      "name": "Recommendations",
      "description": "Recommendations on needed financial products and other steps to take. Based on risk calculations, damage estimations, lifecycle forecasts, and recommendation rules."
    },
    {
      "name": "Contracts",
      "description": "Used to exchange held contracts with the riskine core."
    },
    {
      "name": "State Benefits",
      "description": "These services provide a complete calculation of the country's state benefits, including old-age pension, invalidity pension, and dependants' pension. The calculations and estimations are exact and up-to-date. Where possible, they are consistent over countries."
    },
    {
      "name": "Incomes, Spendings",
      "description": "Incomes and spendings are, along with assets and liabilities, the most basic facts about a financial situation. They are an important input, but they are also subject to __calculations (tax and other), estimations, recommendations and optimizations__. With these services you can define, modify and enrich them. PSD2 services are used to incorporate bank data into the analyis."
    },
    {
      "name": "Assets, Liabilities",
      "description": "Incomes and spendings are, along with assets and liabilities, the most basic facts about a financial situation. They are essential especially for __longterm scenario analysis, for example used in pension advisory__. These services expose state-of-the-art financial mathematical models applied to the defined and gathered user data."
    },
    {
      "name": "Conversation",
      "description": "A major part of good quality advisory is the language interface - fast, customer-specific, and intelligent steering through the advisory is needed. This is why we incorporate conversation as first-level-citizen in our API. __These services are used to steer a frontend client to ask the next necessary data from the user.__ Conversations can be structured into question paths and take a process-like form (for example in questionnaires) but also use natural language capabilities and take a more open form (for example in chatbots)."
    },
    {
      "name": "Risk Sentiment",
      "description": "Risk is a subjective concept as well as an objective one. To analyze the subjective part - sentiment and cognitive presence - of risk perception, we maintain a __risk event database__. It is sourced from __news, social media, and other realtime data sources__. We collect, tag, and connect hundreds of international risk events every hour, and we will keep expanding the database into the past as well. These services expose __trend and cluster analysis, text content analysis, and sentiment analysis__, among others."
    },
    {
      "name": "Support Services",
      "description": "Collection of peripheral data and algorithms to support the advisory process."
    }
  ],
  "paths": {
    "/gettoken": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Get Token",
        "description": "Exchange a Basic Auth hash for a JWT token. Use the JWT token in every subsequent request to the API. Tokens are valid for 14 days.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/html": {
                "examples": {
                  "main example": {
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzZWNyZXQtbWVzc2FnZSI6IkFBQkJGRklKUFBTVFRWIn0.Q5QZJL7A2BFmN0-T0PzhmeRN8EMSzaz3eyZjtYGU2jY"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/advisories/{externalId}": {
      "post": {
        "tags": [
          "Integration"
        ],
        "summary": "Create or Update Advisory",
        "description": "Either create a new advisory or update an existing one with new data. Prefill data or even a whole advisory (for example, one that was previously saved). If the riskine web app is used, the response contains a redirection URL that leads to the prefilled we app. The identifier in the redirection URL is opaque for secure integration.",
        "parameters": [
          {
            "name": "block-navigation",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "description": "If riskine app is used, `true` blocks the navigation and only renders the main content in the app."
          },
          {
            "$ref": "#/components/parameters/externalId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "redirectionurl": "https://<web-app>/site/prefill?id=6a4s19f1-f29c-11ea-9es4-0342c0a89003&block-navigation="
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "person.name.first": "Max",
                    "person.birthdate": "1980-01-01"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Get Advisory Data",
        "description": "Get back the advisory data associated with your `externalId`.",
        "parameters": [
          {
            "name": "includeReports",
            "in": "query",
            "description": "If `true`, all relevant reports will be generated and included in your advisory object.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "input": {
                        "person.birthdate": "1980-01-01"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Integration"
        ],
        "summary": "Delete Advisory Data",
        "description": "Delete the advisory data associated with your `externalId`.",
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/productgroups": {
      "post": {
        "tags": [
          "Recommendations"
        ],
        "summary": "Products",
        "description": "This service lets you access a comprehensive overview of all product recommendations. It contains product prioritization, recommendation reasons, owned status, and other information. Whether the recommendation is for a person or business is controlled via URL parameter.",
        "parameters": [
          {
            "$ref": "#/components/parameters/countryparameter"
          },
          {
            "name": "accountType",
            "in": "query",
            "description": "Control if you receive recommendations for private persons or business entities",
            "schema": {
              "type": "string",
              "enum": [
                "sme",
                "private"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": [
                      {
                        "id": "household",
                        "prioritization": 3,
                        "category": "lifeliving",
                        "owned": false
                      },
                      {
                        "id": "private-liability",
                        "prioritization": 3,
                        "category": "lifeliving",
                        "owned": true
                      },
                      {
                        "id": "accident",
                        "prioritization": 2,
                        "category": "disability",
                        "owned": false
                      },
                      {
                        "id": "invalidity",
                        "prioritization": 2,
                        "category": "disability",
                        "owned": false
                      },
                      {
                        "id": "cash-reserve",
                        "prioritization": 2,
                        "category": "retirementsavings",
                        "owned": false
                      },
                      {
                        "id": "pension",
                        "prioritization": 2,
                        "category": "retirementsavings",
                        "owned": false
                      },
                      {
                        "id": "travel",
                        "prioritization": 1,
                        "category": "cartravel",
                        "owned": false
                      },
                      {
                        "id": "outpatient",
                        "prioritization": 1,
                        "category": "illnesscare",
                        "owned": false
                      },
                      {
                        "id": "dailybenefit-hospitalization",
                        "prioritization": 1,
                        "category": "illnesscare",
                        "owned": false
                      },
                      {
                        "id": "inpatient",
                        "prioritization": 1,
                        "category": "illnesscare",
                        "owned": false
                      },
                      {
                        "id": "care",
                        "prioritization": 1,
                        "category": "illnesscare",
                        "owned": false
                      },
                      {
                        "id": "legal",
                        "prioritization": 1,
                        "category": "lifeliving",
                        "owned": false
                      },
                      {
                        "id": "car-liability",
                        "prioritization": 0,
                        "category": "cartravel",
                        "owned": false
                      },
                      {
                        "id": "car-comprehensive",
                        "prioritization": 0,
                        "category": "cartravel",
                        "owned": false
                      },
                      {
                        "id": "car-legal",
                        "prioritization": 0,
                        "category": "cartravel",
                        "owned": false
                      },
                      {
                        "id": "termlife",
                        "prioritization": 0,
                        "category": "death",
                        "owned": false
                      },
                      {
                        "id": "home",
                        "prioritization": 0,
                        "category": "lifeliving",
                        "owned": false
                      },
                      {
                        "id": "animal-liability",
                        "prioritization": 0,
                        "category": "lifeliving",
                        "owned": false
                      },
                      {
                        "id": "landowner-liability",
                        "prioritization": 0,
                        "category": "lifeliving",
                        "owned": false
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productgroups/prioritization": {
      "post": {
        "tags": [
          "Recommendations"
        ],
        "summary": "Prioritization",
        "description": "This service calculates a recommendation ranking for insurance products, based on the risk impact evaluations as in `/profile/risks/prioritization`. The ranking is discrete, ranging from `3` indicating `'absolutely recommended'` down to `0` indicating `'not recommended'` (e.g. pet insurance for persons without pets). The product list is subject to configuration.  \n\nProductgroup list for Austria (subject to configuration)  \n\n| <div style=width:180px> __product__ </div> | <div style=width:350px> __description__ </div> |\n| --- | --- |\n| `termlife` | Term life insurance |\n| `outpatient` | Supplementary health insurance (ambulant) |\n| `cash-reserve` | Liquidity reserve |\n| `invalidity` | Disability insurance |\n| `home` | Home (homeowners insurance) |\n| `landowner-liability` | Landowner liability |\n| `household` | Household insurance |\n| `animal-liability` | Livestock/pet owner liability |\n| `car-liability` | Motor vehicle liability |\n| `car-comprehensive` | Motor vehicle own-damage |\n| `car-legal` | Motor legal protection |\n| `inpatient` | Supplementary health insurance (for hospital) |\n| `dailybenefit` | Daily benefits insurance |\n| `care` | Nursing care insurance |\n| `private-liability` | Private liability |\n| `legal` | Legal protection |\n| `travel` | Travel insurance |\n| `accident` | Accident insurance |\n| `pension` | Private pension insurance |  \n\nProductgroup list for Germany (subject to configuration)  \n\n| <div style=width:180px> __product__ </div> | <div style=width:250px> __description__ </div> |\n| --- | --- |\n| `accident` | Accident insurance |\n| `private-liability` | Private liability |\n| `landowner-liability` | Landowner liability |\n| `invalidity` | Disability insurance |\n| `car-liability` | Motor vehicle liability |\n| `animal-liability` | Livestock/pet owner liability |\n| `life` | Life insurance 3rd column |\n| `home` | Home (homeowners insurance) |\n| `termlife` | Term life insurance |\n| `car-comprehensive` | Motor vehicle own-damage |\n| `household` | Household insurance |\n| `legal` | Legal protection |\n| `dailybenefit` | Daily benefits insurance |\n| `travel` | Travel insurance |\n| `care` | Nursing care insurance |\n| `health-private` | Private health insurance |\n| `health-supplementary` | Supplementary health insurance |\n| `pension-riester` | Riester pension |\n| `pension-rurup` | Rürup pension |\n| `principal-liability` | Builders liability |\n| `health-public` | Statutory health insurance |\n| `invalidity-child` | Children invalidity insurance |\n| `funeral` | Funeral expense insurance |  \n\nProductgroup list for Switzerland (subject to configuration)  \n\n| <div style=width:180px> __product__ </div> | <div style=width:250px> __description__ </div> |\n| --- | --- |\n| `accident` | Accident insurance |\n| `private-liability` | Private liability |\n| `car` | Motor vehicle insurance |\n| `animal-liability` | Livestock/pet owner liability |\n| `life` | Life insurance 3rd column |\n| `home` | Home (homeowners insurance) |\n| `household` | Household insurance |\n| `legal` | Legal protection |\n| `travel` | Travel insurance |\n| `health-public` | Statutory health insurance |",
        "parameters": [
          {
            "$ref": "#/components/parameters/countryparameter"
          },
          {
            "name": "accountType",
            "in": "query",
            "description": "Control if you receive recommendations for private persons or business entities",
            "schema": {
              "type": "string",
              "enum": [
                "sme",
                "private"
              ]
            }
          },
          {
            "name": "unlock",
            "in": "query",
            "description": "To ensure that all relevant parameters for the calculation were sent in the request set to `hard`. Locked productgroups are filtered from the response.",
            "schema": {
              "type": "string",
              "enum": [
                "hard"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "accident": 3,
                        "private-liability": 3,
                        "landowner-liability": 0,
                        "invalidity": 0,
                        "car-liability": 0,
                        "pension": 1,
                        "home": 0,
                        "termlife": 0,
                        "car-comprehensive": 0,
                        "household": 0,
                        "legal": 1,
                        "car-legal": 0,
                        "travel": 1,
                        "care": 2,
                        "animal-liability": 0,
                        "health-private": 1
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productgroups/coverages": {
      "post": {
        "tags": [
          "Recommendations"
        ],
        "summary": "Coverages",
        "description": "As in the service `/productgroups/prioritization`, this addresses the optimal insurance portfolio and calculates recommended coverages for certain products. The business logic has been initially developed and is continually improved together with neutral experts. The rules are subject to configuration.",
        "parameters": [
          {
            "$ref": "#/components/parameters/countryparameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accident-onetimeloss": {
                      "description": "Coverage for one-time damage after an accident (modify home etc)",
                      "type": "integer"
                    },
                    "accident-incomeloss-total": {
                      "description": "Total damage in case of invalidity, summed over the rest of the expected life span spent earning",
                      "type": "integer"
                    },
                    "accident-incomeloss-monthly": {
                      "description": "Monthly loss of income in case of invalidity",
                      "type": "integer"
                    },
                    "termlife": {
                      "description": "Coverage for risk life insurance",
                      "type": "integer"
                    },
                    "pension-gap-monthly": {
                      "description": "net expected pension gap in current worth (monthly)",
                      "type": "integer"
                    },
                    "pension-gap-yearly": {
                      "description": "net expected pension gap in current worth (yearly)",
                      "type": "integer"
                    },
                    "pension-benefitnet": {
                      "description": "net expected pension in current worth",
                      "type": "integer"
                    },
                    "savings-lowreturns-constant": {
                      "description": "needed monthly saving amount to reach desired pension coverage (0.5% p.a. net returns, constant premium)",
                      "type": "integer"
                    },
                    "savings-lowreturns-dynamic": {
                      "description": "needed monthly saving amount to reach desired pension coverage (0.5% p.a. net returns, dynamic premium)",
                      "type": "integer"
                    },
                    "savings-mediumreturns-constant": {
                      "description": "needed monthly saving amount to reach desired pension coverage (2.5% p.a. net returns, constant premium)",
                      "type": "integer"
                    },
                    "savings-mediumreturns-dynamic": {
                      "description": "needed monthly saving amount to reach desired pension coverage (2.5% p.a. net returns, dynamic premium)",
                      "type": "integer"
                    },
                    "savings-highreturns-constant": {
                      "description": "needed monthly saving amount to reach desired pension coverage (5.0% p.a. net returns, constant premium)",
                      "type": "integer"
                    },
                    "savings-highreturns-dynamic": {
                      "description": "needed monthly saving amount to reach desired pension coverage (5.0% p.a. net returns, dynmic premium)",
                      "type": "integer"
                    },
                    "household": {
                      "description": "recommended coverage for household insurance",
                      "type": "integer"
                    },
                    "cash-reserve": {
                      "description": "recommended saved up liquidity",
                      "type": "integer"
                    }
                  }
                },
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "accident-onetimeloss": 150000,
                        "accident-incomeloss-total": 162000,
                        "accident-incomeloss-monthly": 500,
                        "termlife": 0,
                        "pension-gap-monthly": 210,
                        "pension-gap-yearly": 2940,
                        "pension-benefitnet": 1486,
                        "savings-lowreturns-constant": 438,
                        "savings-lowreturns-dynamic": 266,
                        "savings-mediumreturns-constant": 355,
                        "savings-mediumreturns-dynamic": 209,
                        "savings-highreturns-constant": 226,
                        "savings-highreturns-dynamic": 126,
                        "household": 115000,
                        "cash-reserve": 5100
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productgroups/prioritization/details": {
      "post": {
        "tags": [
          "Recommendations"
        ],
        "summary": "Prioritization Details",
        "description": "Shows the results of the general demands and needs analysis for private clients. The results contain per productgroup/path a description text including the calculated amount of coverage and additional, optional, info text  \n\n| <div style=width:100px> __type__ </div> | <div style=width:275px> __description__ </div> | <div style=width:445px> __example__ </div> |\n| --- | --- | --- |\n| `description` | description of the details (can be empty) | `The insured sum should correlate with your car's value.` |\n| `id` | path information | `kfzkasko` |\n| `title` | title of recommendation | `Motor vehicle own-damage` |\n| `info` | additional information of the details (can be empty) | `null` |",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "description": null,
                          "id": "invalidity-child",
                          "title": "Children invalidity insurance",
                          "info": "Check exactly when your insurance company renders which services. In addition to a lump sum, if affordable, a lifelong pension is desirable."
                        },
                        {
                          "description": null,
                          "id": "funeral",
                          "title": "Funeral expense insurance",
                          "info": "Please note that the contributions are very high at the age of 65 at the beginning of the contract. Check if subareas are already included in your term life insurance."
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "country": "de",
                    "path": "pathvorsorge"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productgroups/products/nextbest": {
      "post": {
        "tags": [
          "Recommendations"
        ],
        "summary": "Next Best Product",
        "description": "This service gives a recommendation on which product to focus on next, for the optimal improvement of the customer's insurance portfolio. The recommendation is based on two components:  \n\n 1. the `riskine customer algorithm` - what is the most recommended based on estimated financial impact? (as in the service `/productgroups/recommendation`)  \n\n 2. the `riskine product recommendation models` based on machine learning models - which products are customers most likely to want/need? (as in the service `/productgroups/nextprobable`)  \n\nThe recommendation is structured in 3 parts:  \n\n 1. the recommended productgroup - given by productgroup id  \n\n 2. the reason for the recommendation  \n\n 3. the ranking of the other productgroups following the recommended one",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "recommendation": {
                          "product": "termlife",
                          "reason": "There is a significant incomeloss for your income-depending family members, estimated to be EUR 163,000 over the course of 10 years"
                        },
                        "ranking": {
                          "invalidity": 4,
                          "private-liability": 4,
                          "accident": 3.2,
                          "pension": 2.9,
                          "household": 2.3,
                          "care": 2,
                          "legal": 1.1,
                          "travel": 1,
                          "health-private": 1,
                          "landowner-liability": 0,
                          "animal-liability": 0,
                          "car-liability": 0,
                          "home": 0,
                          "car-legal": 0,
                          "car-comprehensive": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "person.birthdate": "1980-01-01",
                    "person.work.income.net.monthly": 1920,
                    "person.family.incomedepending": [
                      1,
                      2
                    ],
                    "object.home.type": 1,
                    "person.family.partner": 1
                  }
                }
              }
            }
          }
        }
      }
    },
    "/productgroups/nextprobable": {
      "post": {
        "tags": [
          "Recommendations"
        ],
        "summary": "Next Probable Product",
        "description": "This service is the access point to the `riskine product recommendation models`.  \n\nThis service gives the productgroups ordered by the probability that a user is interested in them. Based on machine learning models trained on anonymized user profiles. In the request, a specific user is specified with age, gender, profession, etc. as in the other services. The response contains all productgroups with their respective probability of interest, ordered from the most probable to the least probable. An optional input is the list of all productgroups that the user already has - if included in the request, the response is filtered to include only those products that the user does not already have.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "response": [
                        {
                          "productgroup": "private-liability",
                          "probability": 0.61
                        },
                        {
                          "productgroup": "accident",
                          "probability": 0.56
                        },
                        {
                          "productgroup": "termlife",
                          "probability": 0.42
                        },
                        {
                          "productgroup": "invalidity",
                          "probability": 0.24
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {}
                }
              }
            }
          }
        }
      }
    },
    "/conversation/questions": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "summary": "Questions",
        "description": "Service to dynamically supply the content of a customer journey / dynamic question or decision tree. This service delivers a list of all parameters (and therefore next questions to be asked) in a schematic/descriptive way as well as meta-information like ordering. With each user interaction, the list is adapted and grows as the end-user is guided through a smart process that is supposed to extract information in an optimal way.  \n\nFeatures are  \n\n * Flavoring of question text as a result of interaction: e.g. Do you have to ask the user politely or in a humorous way to best get your result?  \n\n * Integration of rules (e.g. tariff recommendation rules for persons of different age)  \n\n * Webhooks to use other services for rules or displaying information  \n\nThis service is intended to be the main access point for all of the dynamic front end applications using the riskine API. The resource structure supports integration with different front-ends, e.g. sequential questionnaires, forms, chatbot views and voice.  \n\nCustomization for institutional clients includes predefining the questions as well as adapting the definition format to the specific product needs. In the following, you'll find a description of the resource tags respectively the features of the API. Below, you'll find an example interaction flow.  \n\nThe service needs one additional input from the client:  \n\n| <div style=width:100px> __tag__ </div> | <div style=width:700px> __Description__ </div> |\n| --- | --- |\n| `path` | Workflow id. E.g. `main` for the entry path/initial D&N analysis (Bedarfsanalyse). All other paths, a list of all paths will be provided for each client separately, work the same way. |  \n\nThe response can contain the following tags. Note that the service omits redundant tags (`null`, `false`, `[]`) in the response to reduce load:  \n\n| <div style=width:140px> __tag__ </div> | <div style=width:700px> __Description__ </div> |\n| --- | --- |\n| `params` | Parameter list to include all parameters to be collected from the user. |\n| `type` | Rendering type of the control in the front-end. `radio` are radiobuttons, `multi` are multiselect buttons, `ddown` are dropdowns, `date` are date fields, ` text` are freeform inputs, `inline-text` are readonly-texts, `hidden` are hidden forms and finally `group` are grouped controls which recursively contain a `params` tag. |\n| `validate` | A [JSON Schema v7](http://json-schema.org) to schematize the expected user answer. This always concurs with the schema of the fields in the general __riskine API__ resource |\n| `label` | Textlabel to display as question text. Contains `raw` for raw text and, if needed `md` for markdown-formatted text. Also contains `gluemiddle` and `gluelast` for mapping the user's answer to a fully conversational answer. See section on [Chatbot view](#chatbot) below |\n| `required` | Boolean describing whether the answer is required from the user or no |\n| `pos` | Position in the Parameter list |\n| `schemanode` | If `true`, the list needs to be regenerated after the client has a valid answer from the user. It means that there is more than one branch in the model and the correct path is decided after this question. A new request has to be done. Only needed for sequential questionnaire |\n| `dependencynode` | If `true`, the list needs to be regenerated after the client has a valid answer from the user. It means that there is more than one branch in the model and the correct path is decided based upon this question. Only needed when the questionnaire is shown in form-style (all questions at once) |\n| `showonce` | If `true`, show this question only if the client does not yet have a valid answer from the user. This serves to minimize questions by not showing questions often asked in various different paths. Although the questions were not asked again the will remain, and not crossed out, in the path filled up already. |\n| `reset` | Array of parameters to be reset (deleted) after the client got a valid answer to this question. Empty in most cases. |\n| `dependencies` | Array of parameters. Show the question tagged with `dependency` only when there is a valid answers from the user to all dependencies, otherwise hide it |\n| `booldependencies` | Array of other questions. The tagged question should only be shown when all questions in the array are answered with a `1` |\n| `placeholder` | Text to be shown as a normal placeholder in freeform questions |\n| `override` | Text to be shown as a normal placeholder in freeform questions |\n| `options` | Will be given for `radio`, `multi`, and `ddown` questions. Contains the possible options complete with a `label`, `longlabel` (see [Chatbot view](#chatbot) for more), `value` (which is the value the __riskine API__ expects back), `exclusive` and an `alwaysselected` tag. The `exclusive` tag will always be `true` for `radio` questions, but can vary for `multi` questions |\n| `exclusive` | Always `true` for `radio` options. For `multi` options, can be either `true` (deselect all other options), `<identifier>` (deselect all other options with the same identifier) or `false` (don't deselect any other options) |\n| `alwaysselected` | Tag for options. If `true`, the option should always be selected and the user should be unable to deselect the option |\n| `infotext` | Contains a textlabel for either smallprint under the question title or tooltip text etc. |\n| `fieldwrap` | Contains a textlabel to wrap around the question field where a `$` delimits the field position in the text |\n| `suggest` | a value to be prefilled in case there is no answer from the user yet. Always a valid JSON according to the `validate` schema of the question |\n| `format` | Contains format instructions. E.g. `money` for integers that need to be displayed in currency style |\n| `autofill` | Servicehook for asking into a domain. This tag is a JSON containing a micro service description to get the needed suggestions from the __riskine API__ |\n| `fillother` | Servicehook for filling other fields with calculation results. This tag is a JSON containing a micro service description to get the needed suggestions from the __riskine API__ |  \n\n ### Chatbot view  \n\nTo support chatbot-like front-ends we include additional textlabels that serve to mimic conversation flow, e.g. when asked the gender, user picks `male` yet the chatbot view prints out `I am male`. This textcontent also varies based on rules and different user inputs. The functionality is achieved by tagging questions and options with `longlabels` as described in the following table:  \n\n| <div style=width:100px> __tag__ </div> | <div style=width:200px> __Description__ </div> | <div style=width:400px> __example__ </div> |\n| --- | --- | --- |\n| `longlabel` inside textlabel of freeform question | Should be filled in with the user's answer at the `$` | `I was born on the $` -> `I was born on the 22.10.1989` |\n| `longlabel` inside radio option | Complete answer - can simply be printed out | `label`: `yes`, `longlabel`: `Yes please, I need additional coverage for my second motorcycle` |\n| `longlabel` inside multi option | To be used with the `gluemiddle` and `gluelast` parameters given at question level. The long answer needs to be built like _first answer_ + `gluemiddle` + _second answer_ + `gluemiddle` + ... + `gluelast` + _last answer_ | first answer `longlabel`: `My partner`, second answer `longlabel`: `3 kids`, Third answer `longlabel`: `other persons`, `gluemiddle`: ``, ``, `gluelast`: `and` -> `My partner, 3 kids and other persons` |\n| `gluemiddle` inside multi question textlabel | See above | first answer `longlabel`: `My partner`, second answer `longlabel`: `3 kids`, Third answer `longlabel`: `other persons`, `gluemiddle`: ``, ``, `gluelast`: `and` -> `My partner, 3 kids and other persons` |\n| `gluelast` inside multi question textlabel | See above | first answer `longlabel`: `My partner`, second answer `longlabel`: `3 kids`, Third answer `longlabel`: `other persons`, `gluemiddle`: ``, ``, `gluelast`: `and` -> `My partner, 3 kids and other persons` |",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "first response": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "params": {
                          "person.sport.habit": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "Yes, I exercise on a regular basis.",
                                "label": "Yes, regularly",
                                "value": 1
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "Yes, I exercise from time to time.",
                                "label": "Yes, irregularly",
                                "value": 2
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "No, I don't do any sports.",
                                "label": "No",
                                "value": 3
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                1,
                                2,
                                3
                              ]
                            },
                            "label": {
                              "raw": "Do you exercise?",
                              "validatehint": "Please choose an option"
                            },
                            "questioncategory": "detail",
                            "pos": 3
                          },
                          "person.health.smoke.habit.one": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "Yes, I smoke.",
                                "label": "Yes",
                                "value": 1
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "I smoke sometimes.",
                                "label": "Yes, occassionally",
                                "value": 2
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "No, I don´t smoke.",
                                "label": "No",
                                "value": 3
                              },
                              {
                                "pos": 4,
                                "exclusive": "true",
                                "longlabel": "I don´t want to tell.",
                                "label": "Not specified",
                                "value": 4
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                1,
                                2,
                                3,
                                4
                              ]
                            },
                            "label": {
                              "raw": "Do you smoke?",
                              "validatehint": "Please choose an option"
                            },
                            "questioncategory": "detail",
                            "pos": 4
                          },
                          "person.birthdate": {
                            "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\d",
                            "resultclass": "parameter",
                            "gposition": 1,
                            "type": "date",
                            "required": true,
                            "options": [
                              {
                                "exclusive": "true"
                              }
                            ],
                            "placeholder": "DD.MM.YYYY",
                            "validate": {
                              "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\d",
                              "type": "string",
                              "max-date": "-18Y",
                              "min-date": "-120Y"
                            },
                            "showonce": true,
                            "min-date": "-120Y",
                            "format": "date",
                            "label": {
                              "raw": "What is your date of birth? (The minimum age 18 years.)",
                              "validatehint": "Must be at least 18 years back"
                            },
                            "questioncategory": "detail",
                            "max-date": "-18Y",
                            "pos": 5
                          },
                          "object.animal.type.select": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "Yes, I have a dog or a horse.",
                                "label": "Yes, at least 1 dog or horse",
                                "value": 1
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "Yes, I have pets, but no dogs or horses.",
                                "label": "Yes, other pets",
                                "value": 2
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "No, I don´t have any pets.",
                                "label": "No",
                                "value": 3
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                1,
                                2,
                                3
                              ]
                            },
                            "label": {
                              "raw": "Do you have pets?",
                              "validatehint": "Please choose an option"
                            },
                            "questioncategory": "detail",
                            "pos": 6
                          },
                          "object.home.type": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "I live in a rented apartment.",
                                "label": "Rented apartment",
                                "value": 1
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "I live in a rented house.",
                                "label": "Rented house",
                                "value": 2
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "I live in a condominium.",
                                "label": "Condominium",
                                "value": 3
                              },
                              {
                                "pos": 4,
                                "exclusive": "true",
                                "longlabel": "I live in my own house.",
                                "label": "House (proprietary)",
                                "value": 4
                              },
                              {
                                "pos": 5,
                                "exclusive": "true",
                                "longlabel": "I live with my parents or with my partner.",
                                "label": "With parents/ partner",
                                "value": 5
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            },
                            "label": {
                              "raw": "Where do you live?",
                              "validatehint": "Please choose an option"
                            },
                            "schemanode": true,
                            "questioncategory": "detail",
                            "pos": 7
                          },
                          "object.vehicle.type.owned": {
                            "gposition": 1,
                            "type": "multi",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "false",
                                "longlabel": "a car",
                                "label": "Car",
                                "value": "PKW"
                              },
                              {
                                "pos": 2,
                                "exclusive": "false",
                                "longlabel": "a motorbike",
                                "label": "Motorbike",
                                "value": "KRA"
                              },
                              {
                                "pos": 3,
                                "exclusive": "false",
                                "longlabel": "a truck",
                                "label": "Truck",
                                "value": "LKW"
                              },
                              {
                                "pos": 4,
                                "exclusive": "false",
                                "longlabel": "another vehicle",
                                "label": "Other vehicle ",
                                "value": "SON"
                              },
                              {
                                "pos": 5,
                                "exclusive": "true",
                                "longlabel": "I don´t own a vehicle.",
                                "label": "No vehicle",
                                "value": "kein"
                              }
                            ],
                            "validate": {
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "string",
                                "enum": [
                                  "999",
                                  "ANH",
                                  "KRA",
                                  "LKW",
                                  "MOP",
                                  "OMN",
                                  "PKW",
                                  "PRO",
                                  "SON",
                                  "ZUG",
                                  "kein"
                                ]
                              }
                            },
                            "label": {
                              "raw": "What type of vehicle do you own?",
                              "gluelast": " and ",
                              "gluemiddle": ", ",
                              "validatehint": "Please choose at least one option"
                            },
                            "schemanode": true,
                            "minItems": 1,
                            "questioncategory": "detail",
                            "pos": 8
                          },
                          "person.family.partner": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "I´m single.",
                                "label": "Single",
                                "value": 1
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "I´m married or in a civil union.",
                                "label": "Married/ in a civil union",
                                "value": 2
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "I´m divorced.",
                                "label": "Divorced",
                                "value": 3
                              },
                              {
                                "pos": 4,
                                "exclusive": "true",
                                "longlabel": "I´m widowed.",
                                "label": "Widowed",
                                "value": 4
                              },
                              {
                                "pos": 5,
                                "exclusive": "true",
                                "longlabel": "I´m in a relationship.",
                                "label": "In a relationship",
                                "value": 5
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            },
                            "showonce": true,
                            "label": {
                              "raw": "What is your marital status?",
                              "validatehint": "Please choose an option"
                            },
                            "questioncategory": "detail",
                            "pos": 9
                          }
                        }
                      }
                    }
                  },
                  "second response": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "params": {
                          "person.sport.habit": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "Yes, I exercise on a regular basis.",
                                "label": "Yes, regularly",
                                "value": 1
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "Yes, I exercise from time to time.",
                                "label": "Yes, irregularly",
                                "value": 2
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "No, I don't do any sports.",
                                "label": "No",
                                "value": 3
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                1,
                                2,
                                3
                              ]
                            },
                            "label": {
                              "raw": "Do you exercise?",
                              "validatehint": "Please choose an option"
                            },
                            "questioncategory": "detail",
                            "pos": 3
                          },
                          "person.health.smoke.habit.one": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "Yes, I smoke.",
                                "label": "Yes",
                                "value": 1
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "I smoke sometimes.",
                                "label": "Yes, occassionally",
                                "value": 2
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "No, I don´t smoke.",
                                "label": "No",
                                "value": 3
                              },
                              {
                                "pos": 4,
                                "exclusive": "true",
                                "longlabel": "I don´t want to tell.",
                                "label": "Not specified",
                                "value": 4
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                1,
                                2,
                                3,
                                4
                              ]
                            },
                            "label": {
                              "raw": "Do you smoke?",
                              "validatehint": "Please choose an option"
                            },
                            "questioncategory": "detail",
                            "pos": 4
                          },
                          "person.birthdate": {
                            "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\d",
                            "resultclass": "parameter",
                            "gposition": 1,
                            "type": "date",
                            "required": true,
                            "options": [
                              {
                                "exclusive": "true"
                              }
                            ],
                            "placeholder": "DD.MM.YYYY",
                            "validate": {
                              "pattern": "\\d\\d\\d\\d-\\d\\d-\\d\\d",
                              "type": "string",
                              "max-date": "-18Y",
                              "min-date": "-120Y"
                            },
                            "showonce": true,
                            "min-date": "-120Y",
                            "format": "date",
                            "label": {
                              "raw": "What is your date of birth? (The minimum age 18 years.)",
                              "validatehint": "Must be at least 18 years back"
                            },
                            "questioncategory": "detail",
                            "max-date": "-18Y",
                            "pos": 5
                          },
                          "object.animal.type.select": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "Yes, I have a dog or a horse.",
                                "label": "Yes, at least 1 dog or horse",
                                "value": 1
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "Yes, I have pets, but no dogs or horses.",
                                "label": "Yes, other pets",
                                "value": 2
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "No, I don´t have any pets.",
                                "label": "No",
                                "value": 3
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                1,
                                2,
                                3
                              ]
                            },
                            "label": {
                              "raw": "Do you have pets?",
                              "validatehint": "Please choose an option"
                            },
                            "questioncategory": "detail",
                            "pos": 6
                          },
                          "object.home.type": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "I live in a rented apartment.",
                                "label": "Rented apartment",
                                "value": 1
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "I live in a rented house.",
                                "label": "Rented house",
                                "value": 2
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "I live in a condominium.",
                                "label": "Condominium",
                                "value": 3
                              },
                              {
                                "pos": 4,
                                "exclusive": "true",
                                "longlabel": "I live in my own house.",
                                "label": "House (proprietary)",
                                "value": 4
                              },
                              {
                                "pos": 5,
                                "exclusive": "true",
                                "longlabel": "I live with my parents or with my partner.",
                                "label": "With parents/ partner",
                                "value": 5
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            },
                            "label": {
                              "raw": "Where do you live?",
                              "validatehint": "Please choose an option"
                            },
                            "schemanode": true,
                            "questioncategory": "detail",
                            "pos": 7
                          },
                          "object.home.size.total": {
                            "resultclass": "parameter",
                            "gposition": 1,
                            "type": "text",
                            "required": true,
                            "validate": {
                              "type": "integer",
                              "minimum": 10,
                              "maximum": 10000
                            },
                            "showonce": true,
                            "format": "m2",
                            "label": {
                              "longlabel": "My flat has $ m².",
                              "raw": "What is the size of your rented apartment?",
                              "validatehint": "Please insert a value between 10 and 10000"
                            },
                            "questioncategory": "detail",
                            "maximum": "10000",
                            "fieldwrap": "$ m² living space",
                            "minimum": "10",
                            "pos": 8
                          },
                          "object.vehicle.type.owned": {
                            "gposition": 1,
                            "type": "multi",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "false",
                                "longlabel": "a car",
                                "label": "Car",
                                "value": "PKW"
                              },
                              {
                                "pos": 2,
                                "exclusive": "false",
                                "longlabel": "a motorbike",
                                "label": "Motorbike",
                                "value": "KRA"
                              },
                              {
                                "pos": 3,
                                "exclusive": "false",
                                "longlabel": "a truck",
                                "label": "Truck",
                                "value": "LKW"
                              },
                              {
                                "pos": 4,
                                "exclusive": "false",
                                "longlabel": "another vehicle",
                                "label": "Other vehicle ",
                                "value": "SON"
                              },
                              {
                                "pos": 5,
                                "exclusive": "true",
                                "longlabel": "I don´t own a vehicle.",
                                "label": "No vehicle",
                                "value": "kein"
                              }
                            ],
                            "validate": {
                              "type": "array",
                              "minItems": 1,
                              "items": {
                                "type": "string",
                                "enum": [
                                  "999",
                                  "ANH",
                                  "KRA",
                                  "LKW",
                                  "MOP",
                                  "OMN",
                                  "PKW",
                                  "PRO",
                                  "SON",
                                  "ZUG",
                                  "kein"
                                ]
                              }
                            },
                            "label": {
                              "raw": "What type of vehicle do you own?",
                              "gluelast": " and ",
                              "gluemiddle": ", ",
                              "validatehint": "Please choose at least one option"
                            },
                            "schemanode": true,
                            "minItems": 1,
                            "questioncategory": "detail",
                            "pos": 9
                          },
                          "object.vehicle.value": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "My vehicle/s are worth less than 5.000 €.",
                                "label": "Less than 5.000 €",
                                "value": 5000
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "My vehicle/s are worth up to 10.000 €.",
                                "label": "Up to 10.000 €",
                                "value": 10000
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "My vehicle/s are worth up to 20.000 €.",
                                "label": "Up to 20.000 €",
                                "value": 20000
                              },
                              {
                                "pos": 4,
                                "exclusive": "true",
                                "longlabel": "My vehicle/s are worth up to 60.000 €.",
                                "label": "Up to 60.000 €",
                                "value": 60000
                              },
                              {
                                "pos": 5,
                                "exclusive": "true",
                                "longlabel": "My vehicle/s are worth more than 60.000 €.",
                                "label": "More than 60.000 €",
                                "value": 150000
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                5000,
                                10000,
                                20000,
                                60000,
                                150000
                              ]
                            },
                            "label": {
                              "raw": "What is the overall value of all your vehicles?",
                              "validatehint": "Please choose an option"
                            },
                            "questioncategory": "detail",
                            "pos": 10
                          },
                          "person.family.partner": {
                            "gposition": 1,
                            "type": "radio",
                            "required": true,
                            "options": [
                              {
                                "pos": 1,
                                "exclusive": "true",
                                "longlabel": "I´m single.",
                                "label": "Single",
                                "value": 1
                              },
                              {
                                "pos": 2,
                                "exclusive": "true",
                                "longlabel": "I´m married or in a civil union.",
                                "label": "Married/ in a civil union",
                                "value": 2
                              },
                              {
                                "pos": 3,
                                "exclusive": "true",
                                "longlabel": "I´m divorced.",
                                "label": "Divorced",
                                "value": 3
                              },
                              {
                                "pos": 4,
                                "exclusive": "true",
                                "longlabel": "I´m widowed.",
                                "label": "Widowed",
                                "value": 4
                              },
                              {
                                "pos": 5,
                                "exclusive": "true",
                                "longlabel": "I´m in a relationship.",
                                "label": "In a relationship",
                                "value": 5
                              }
                            ],
                            "validate": {
                              "type": "integer",
                              "enum": [
                                1,
                                2,
                                3,
                                4,
                                5
                              ]
                            },
                            "showonce": true,
                            "label": {
                              "raw": "What is your marital status?",
                              "validatehint": "Please choose an option"
                            },
                            "questioncategory": "detail",
                            "pos": 11
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "first request": {
                  "value": {
                    "path": "main"
                  }
                },
                "second request": {
                  "value": {
                    "path": "main",
                    "person.birthdate": "1980-01-01",
                    "person.sport.habit": 2,
                    "person.health.smoke.habit.one": 1,
                    "object.home.type": 1,
                    "object.vehicle.type.owned": [
                      "PKW"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conversation/{id}": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "summary": "Create a Conversation",
        "description": "Create a conversation and interact with it in a stateful manner. Give answers and ask for the next questions bit by bit.",
        "parameters": [
          {
            "$ref": "#/components/parameters/conversationId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              },
              "examples": {
                "main example": {
                  "value": {
                    "person.name.first": "Max",
                    "person.birthdate": "1980-01-01"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "id": "530370af-4fe0-4884-83ff-b6912554b4cf"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conversation/{id}/answer": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "summary": "Give Answers",
        "description": "Give the next answers to the open conversation according to the last specified questions and receive back the next statements and/or questions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/conversationId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "initial-question": "Was wird durch meine Haushaltsversicherung abgedeckt?"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "params": {
                        "coverage.benefit": {
                          "label": {
                            "validatehint": "Bitte einen gültigen Wert angeben.",
                            "raw": "Die Haushaltsversicherung kommt für Schäden an deinem Wohnungsinhalt durch Verlust oder Beschädigung auf. Darüber hinaus beinhaltet die Haushaltsversicherung auch einen Haftpflichtschutz. Das bedeutet, dass die Versicherung auch für Schäden aufkommt, die du oder deine Familienmitglieder anderen Personen zugefügt haben. \\n\\n Der Onlineabschluss bietet dir folgende Vorteile: \\n\\n - Rascher Abschluss, \\n\\n - sofortige Gültigkeit, \\n\\n - individuelle Deckung, \\n\\n - täglich kündbar und \\n\\n - abschmelzender Selbstbehalt"
                          },
                          "gposition": 1,
                          "type": "inline-text",
                          "questioncategory": "detail"
                        },
                        "restart": {
                          "label": {
                            "validatehint": "Bitte einen gültigen Wert angeben.",
                            "raw": "🏁 Wobei kann ich dir noch behilflich sein?"
                          },
                          "gposition": 2,
                          "type": "text",
                          "questioncategory": "detail",
                          "validate": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/conversation/results": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "summary": "Results",
        "description": "After finishing a specific path of a product, results will be shown as a summary of the previous questions. This summary includes all relevant information concerning the personal data, wishes and needs of the customer. /pathresults contains exactly one `category` which is hierarchically divided as follows  \n\nA category contains the following fields  \n\n| <div style=width:120px> __type__ </div> | <div style=width:400px> __description__ </div> | <div style=width:150px> __example__ </div> |\n| --- | --- | --- |\n| `name` | name of the category | `Life and Living` |\n| `id` | ID of the category | `lifeliving` |\n| `productgroup` | a productgroup contains reasons and optional modules | `` |  \n\nA productgroup contains the following fields  \n\n| <div style=width:120px> __type__ </div> | <div style=width:250px> __description__ </div> | <div style=width:300px> __example__ </div> |\n| --- | --- | --- |\n| `name` | name of the product | `Livestock/pet owner liability` |\n| `id` | ID of the propduct group | `tier` |\n| `products` | products of the insurance | `` |  \n\nA product contains the following fields  \n\n| <div style=width:120px> __type__ </div> | <div style=width:250px> __description__ </div> | <div style=width:300px> __example__ </div> |\n| --- | --- | --- |\n| `name` | name of the product | `Animal insurance` |\n| `id` | ID of the module | `tierstd` |\n| `reasons` | list of all reasons of the product | `Covers any damages caused by your cat(s).` |\n| `modules` | a specification of one product. Modules usually contain different components. | `` |  \n\nA module contains the following fields  \n\n| <div style=width:120px> __type__ </div> | <div style=width:250px> __description__ </div> | <div style=width:300px> __example__ </div> |\n| --- | --- | --- |\n| `name` | name of the module | `Dog Liability Insurance` |\n| `id` | ID of the module | `hund`` |\n| `parameter` | contains the parsed label | `Date of birth dog: 01.01.2010` |",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "categories": [
                          {
                            "name": "Life and Living",
                            "productgroups": [
                              {
                                "name": "Livestock/pet owner liability",
                                "id": "animal-liability",
                                "products": [
                                  {
                                    "name": "Animal insurance",
                                    "id": "animal-liability",
                                    "modules": [
                                      {
                                        "name": "Dog Liability Insurance",
                                        "id": "dog",
                                        "parameter": [
                                          {
                                            "parsedlabel": "Date of birth dog: 01.01.2010"
                                          }
                                        ]
                                      },
                                      {
                                        "name": "Cat Liability Insurance",
                                        "id": "cat",
                                        "parameter": [
                                          {
                                            "parsedlabel": "Date of birth cat: 02.04.2012"
                                          }
                                        ]
                                      }
                                    ],
                                    "reasons": [
                                      "Covers any damages caused by your dog(s).",
                                      "Covers any damages caused by your cat(s).",
                                      "Desired start of insurance: 01.01.2018",
                                      "Comments: Insurance for cat need to be for 3 cats."
                                    ]
                                  }
                                ]
                              }
                            ],
                            "id": "lifeliving"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "country": "ch",
                    "path": "animal-liability",
                    "object.animal[0].type.radio": 1,
                    "object.animal.dog[0].birthdate": "2010-01-01",
                    "object.animal[0].looper": 1,
                    "object.animal[1].type.radio": 2,
                    "object.animal.cat[1].birthdate": "2012-04-02",
                    "object.animal[1].looper": 2,
                    "recommendation.animal-liability.startdate": "2018-01-01",
                    "recommendation.animal-liability.comments": "Insurance for cat need to be for 3 cats."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/statebenefits/pension": {
      "post": {
        "tags": [
          "State Benefits"
        ],
        "summary": "Old Age Pension",
        "description": "To calculate the pension you need to specify gender, birthday, profession, income and your highest educational attainment, and maybe additional parameters depending on country specifics. In many countries, there are parameters that are not commonly known to a standard user but make possible a more exact calculation (For example, in Austria,  the current amount in the pension account). These parameters are estimated if omitted but are taken into account if included in the input. \n\nSpecific for `at`  \n\nIf you specify income-dependent children and age of under 50, the pension calculator will take the `Family Bonus Plus` into account in its entirety. If you also specify the children's date of birth and educational status, the `Family Bonus Plus` is only granted to children under 18 or children under 24 who are still in education.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "inflation": {
                      "type": "number",
                      "description": "inflation used for calculation"
                    },
                    "wageincrease": {
                      "type": "number",
                      "description": "wageincrease used for calculation"
                    },
                    "benefitgross": {
                      "type": "object",
                      "description": "gross pension, monthly and yearly"
                    },
                    "benefitnet": {
                      "type": "object",
                      "description": "net pension, monthly and yearly"
                    },
                    "lastincomegross": {
                      "type": "object",
                      "description": "last gross income, monthly and yearly"
                    },
                    "lastincomenet": {
                      "type": "object",
                      "description": "last net income, monthly and yearly"
                    },
                    "socialinsurancecontribution": {
                      "type": "object",
                      "description": "social insurance contribution of the last income, monthly"
                    },
                    "tax": {
                      "type": "object",
                      "description": "tax of the last income, monthly"
                    },
                    "gapgross": {
                      "type": "object",
                      "description": "gap between last gross income and gross pension, monthly and yearly"
                    },
                    "gap": {
                      "type": "object",
                      "description": "gap between last net income and net pension, monthly and yearly"
                    },
                    "retirement": {
                      "type": "object",
                      "description": "official regular retirement age, regular retirement age (maximum between current age, early official age and official regular age), regular retirement age months, official early retirement age, earliest possible retirement age(maximum between current age and official early retirement age), date of regular retirement (associated with regular retirement age), earliest date of retirement (associated with earliest possible retirement age), years until the regular retirement age (from today), years until the earliest possible retirement age (from today), estimated years in pension from the regular retirement age and estimated years in pension from the earliest possible retirement age"
                    },
                    "additionalpension": {
                      "type": "object",
                      "description": "optional additional pension if opted in, monthly and yearly"
                    }
                  }
                },
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "inflation": 2.17,
                        "wageincrease": 1.2714,
                        "benefitgross": {
                          "monthly": 1996,
                          "yearly": 27941
                        },
                        "benefitnet": {
                          "monthly": 1626,
                          "yearly": 23112
                        },
                        "lastincomegross": {
                          "monthly": 3206,
                          "yearly": 44885
                        },
                        "lastincomenet": {
                          "monthly": 2123,
                          "yearly": 30504
                        },
                        "socialinsurancecontribution": {
                          "monthly": 581
                        },
                        "tax": {
                          "monthly": 503
                        },
                        "gapgross": {
                          "monthly": 1210,
                          "yearly": 16944
                        },
                        "gap": {
                          "monthly": 497,
                          "yearly": 7392
                        },
                        "retirement": {
                          "regularage": 65,
                          "regularagemonths": 0,
                          "earlyage": 65,
                          "latestage": 68,
                          "date": "2045-01-01",
                          "yearsuntilretirement-regularage": 24.6,
                          "yearsuntilretirement-earlyage": 24.6,
                          "duration-regularage": 15.5,
                          "duration-earlyage": 15.5
                        },
                        "additionalpension": {
                          "monthly": 0,
                          "yearly": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "person.gender": 1,
                    "person.birthdate": "1980-01-01",
                    "person.work.professiontype": 1,
                    "person.work.income.gross.monthly": 2500,
                    "person.education.level": 1,
                    "person.statebenefits.pension.sum": 10345.32,
                    "person.statebenefits.pension.year": 2019,
                    "person.statebenefits.pension.professionaldevelopment": 1,
                    "person.statebenefits.pension.months": 143,
                    "person.family.incomedepending": [
                      2
                    ],
                    "person.statebenefits.pension.increaseinvalue": "today",
                    "person.statebenefits.pension.earliestpensionage": 0
                  }
                }
              }
            }
          }
        }
      }
    },
    "/statebenefits/invalidity": {
      "post": {
        "tags": [
          "State Benefits"
        ],
        "summary": "Invalidity",
        "description": "| <div style=width:225px> __Field__ </div> | <div style=width:600px> __description__ </div> |\n| --- | --- |\n| `benefitgross` | job incapacity gross sum, monthly, yearly and expected total (until regular retirement) |\n| `benefitnet` | job incapacity net sum, monthly, yearly and expected total (until regular retirement) |\n| `lastincomegross` | last gross income before entry into invalidity pension, monthly, yearly and expected total (until regular retirement) |\n| `lastincomenet` | last net income before entry into invalidity pension, monthly, yearly and expected total (until regular retirement) |\n| `socialinsurancecontribution` | social insurance contribution of the last income, monthly |\n| `tax` | tax of the last income, monthly |\n| `gapgross` | gap between last gross income and gross benefit, monthly, yearly and expected total (until regular retirement) |\n| `gap` | gap between last net income and net benefit, monthly, yearly and expected total (until regular retirement) |\n| `retirement` | earliest retirement age, latest retirement age, planned date of retirement, current age years, current age months, years until regular retirement |",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "benefitgross": {
                          "monthly": 1759,
                          "yearly": 24633,
                          "total": 640451
                        },
                        "benefitnet": {
                          "monthly": 1612,
                          "yearly": 22519,
                          "total": 544743
                        },
                        "lastincomegross": {
                          "monthly": 2500,
                          "yearly": 35000,
                          "total": 910000
                        },
                        "lastincomenet": {
                          "monthly": 1874,
                          "yearly": 26416,
                          "total": 705658
                        },
                        "socialinsurancecontribution": {
                          "monthly": 453
                        },
                        "tax": {
                          "monthly": 173
                        },
                        "gapgross": {
                          "monthly": 741,
                          "yearly": 10374,
                          "total": 269549
                        },
                        "gap": {
                          "monthly": 262,
                          "yearly": 3668,
                          "total": 160915
                        },
                        "retirement": {
                          "earlyage": 39,
                          "latestage": 65,
                          "date": "2019-10-01",
                          "age": 39,
                          "agemonths": 8,
                          "yearsuntilretirement": 26
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "person.gender": 1,
                    "person.birthdate": "1980-01-01",
                    "person.work.professiontype": 1,
                    "person.work.income.gross.monthly": 2500,
                    "person.education.level": 1,
                    "person.statebenefits.pension.sum": 10345.32,
                    "person.statebenefits.pension.year": 2019,
                    "person.statebenefits.pension.professionaldevelopment": 1,
                    "person.statebenefits.pension.months": 143,
                    "person.family.incomedepending": [
                      2
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/statebenefits/dependants": {
      "post": {
        "tags": [
          "State Benefits"
        ],
        "summary": "Dependants",
        "description": "To calculate the widow pension the family status is needed in addition to the parameters necessary for the calculation of the pension. For a more precise calculation, you can also specify the duration of the marriage, the date of birth and the income of the partner. For the calculation of the orphans' pension, the dates of birth and the educational level of the children are additionally required.  \n\n| <div style=width:100px> __Field__ </div> | <div style=width:600px> __description__ </div> |\n| --- | --- |\n| `widow` | gross/net benefit (monthly), gross/net gap (monthly), information about whether pension is limited or not (1 = unlimited) and date of retirement |\n| `orphans` | gross/net benefit for all children in total (monthly), grossnet gap (monthly), gross/net benefit for one child (monthly) and date of retirement |\n| `fullorphans` | same as orhpans, but both parents deceased |\n| `mean` | monthly mean of gross/net benefit, last gross/net income before entry into pension, social insurance contribution/tax of the last income and gap |",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "widow": {
                          "benefitgross": {
                            "monthly": 811
                          },
                          "benefitnet": {
                            "monthly": 500
                          },
                          "gapgross": {
                            "monthly": 1689
                          },
                          "gap": {
                            "monthly": 1374
                          },
                          "unlimited": 1,
                          "retirement": {
                            "date": "2019-10-01"
                          }
                        },
                        "orphans": {
                          "benefitgross": {
                            "monthly": 422
                          },
                          "benefitnet": {
                            "monthly": 422
                          },
                          "gapgross": {
                            "monthly": 2078
                          },
                          "gap": {
                            "monthly": 1452
                          },
                          "singlegross": {
                            "monthly": 422
                          },
                          "singlenet": {
                            "monthly": 422
                          },
                          "retirement": {
                            "date": "2019-10-01"
                          }
                        },
                        "fullorphans": {
                          "benefitgross": {
                            "monthly": 633
                          },
                          "benefitnet": {
                            "monthly": 633
                          },
                          "gapgross": {
                            "monthly": 1867
                          },
                          "gap": {
                            "monthly": 1241
                          },
                          "singlegross": {
                            "monthly": 633
                          },
                          "singlenet": {
                            "monthly": 633
                          },
                          "retirement": {
                            "date": "2019-10-01"
                          }
                        },
                        "mean": {
                          "benefitgross": {
                            "monthly": 1233
                          },
                          "benefitnet": {
                            "monthly": 922
                          },
                          "lastincomegross": {
                            "monthly": 2500
                          },
                          "lastincomenet": {
                            "monthly": 1874
                          },
                          "socialinsurancecontribution": {
                            "monthly": 453
                          },
                          "tax": {
                            "monthly": 173
                          },
                          "gapgross": {
                            "monthly": 1267
                          },
                          "gap": {
                            "monthly": 952
                          }
                        },
                        "user": {
                          "netto": 1874,
                          "children": [
                            [
                              "2008-01-01",
                              1
                            ]
                          ],
                          "careerfactor": 1,
                          "timemarried": 12,
                          "partnerincome": 1992,
                          "partnerage": 39
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "person.gender": 1,
                    "person.birthdate": "1980-01-01",
                    "person.work.professiontype": 1,
                    "person.work.income.gross.monthly": 2500,
                    "person.education.level": 1,
                    "person.statebenefits.pension.sum": 10345.32,
                    "person.statebenefits.pension.year": 2019,
                    "person.statebenefits.pension.professionaldevelopment": 1,
                    "person.statebenefits.pension.months": 143,
                    "person.family.incomedepending": [
                      2
                    ],
                    "person.family.partner": 2,
                    "person.children[0].birthdate": "2008-01-01",
                    "person.children[0].education.status": 1,
                    "person.partner.work.income.gross": 1992
                  }
                }
              }
            }
          }
        }
      }
    },
    "/statebenefits/care": {
      "post": {
        "tags": [
          "State Benefits"
        ],
        "summary": "Long term care",
        "description": "There is a varying number of `levels`, e.g. 5 in Germany, 7 in Austria. The response contains the correct number of levels, called `level1`, `level2`, etc.  \n\n| <div style=width:140px> __Field__ </div> | <div style=width:700px> __description__ </div> |\n| --- | --- |\n| `user` | Information about advised person: net income, children, careerfactor, time in marriage, income of partner, age of partner |\n| `care/level1, care/level2, ...` | Per level in the respective public system - estimated cost, monthly and yearly, net benefit, monthly and yearly, gap, monthly and yearly, infotext |\n| `mean` | mean over all levels. contains the same data points |",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "user": {
                          "netto": 1809,
                          "children": null,
                          "careerfactor": 0,
                          "timemarried": 11,
                          "partnerincome": 2553,
                          "partnerage": 38
                        },
                        "care": {
                          "level1": {
                            "cost": {
                              "monthly": 1283,
                              "yearly": 17962
                            },
                            "benefitnet": {
                              "monthly": 157,
                              "yearly": 2202
                            },
                            "gap": {
                              "monthly": 1126,
                              "yearly": 15760
                            },
                            "info": "#### Pflegebedarf Stufe 1  \n Mehr als 65 Stunden pro Monat.  \n `Quelle: help.gv.at`\n\n\n#### Berechnungen Kosten:  \n Annahme eines Stundensatzes von rund € 16,- für die Betreuung zuhause."
                          },
                          "level2": {
                            "cost": {
                              "monthly": 1727,
                              "yearly": 24178
                            },
                            "benefitnet": {
                              "monthly": 290,
                              "yearly": 4060
                            },
                            "gap": {
                              "monthly": 1437,
                              "yearly": 20118
                            },
                            "info": "#### Pflegebedarf Stufe 2  \n Mehr als 95 Stunden pro Monat.  \n `Quelle: help.gv.at`\n\n\n#### Berechnungen Kosten:  \n Annahme eines Stundensatzes von rund € 16,- für die Betreuung zuhause."
                          },
                          "level3": {
                            "cost": {
                              "monthly": 2340,
                              "yearly": 32760
                            },
                            "benefitnet": {
                              "monthly": 452,
                              "yearly": 6325
                            },
                            "gap": {
                              "monthly": 1888,
                              "yearly": 26435
                            },
                            "info": "#### Pflegebedarf Stufe 3  \n Mehr als 120 Stunden pro Monat.  \n `Quelle: help.gv.at`\n\n\n#### Berechnungen Kosten:  \n Annahme einer Vollzeitbetreuung zuhause mit Kosten iHv € 2.340."
                          },
                          "level4": {
                            "cost": {
                              "monthly": 2340,
                              "yearly": 32760
                            },
                            "benefitnet": {
                              "monthly": 678,
                              "yearly": 9486
                            },
                            "gap": {
                              "monthly": 1662,
                              "yearly": 23274
                            },
                            "info": "#### Pflegebedarf Stufe 4  \n Mehr als 160 Stunden pro Monat.  \n `Quelle: help.gv.at`\n\n\n#### Berechnungen Kosten:  \n Annahme einer Vollzeitbetreuung zuhause mit Kosten iHv € 2.340."
                          },
                          "level5": {
                            "cost": {
                              "monthly": 3500,
                              "yearly": 49000
                            },
                            "benefitnet": {
                              "monthly": 920,
                              "yearly": 12884
                            },
                            "gap": {
                              "monthly": 2580,
                              "yearly": 36116
                            },
                            "info": "#### Pflegebedarf Stufe 5  \n Mehr als 180 Stunden pro Monat und Erfordernis eines außergewöhnlichen Pflegeaufwands.  \n `Quelle: help.gv.at`\n\n\n#### Berechnungen Kosten:  \n Annahme einer Heimbetreuung mit Kosten iHv € 3.500."
                          },
                          "level6": {
                            "cost": {
                              "monthly": 3500,
                              "yearly": 49000
                            },
                            "benefitnet": {
                              "monthly": 1285,
                              "yearly": 17993
                            },
                            "gap": {
                              "monthly": 2215,
                              "yearly": 31007
                            },
                            "info": "#### Pflegebedarf Stufe 6  \n Mehr als 180 Stunden pro Monat und Notwendigkeit\n\n - von zeitlich nicht planbaren regelmäßigen Betreuungsmaßnahmen bei Tag und Nacht oder\n  - der erforderlichen dauernden Anwesenheit einer Pflegeperson wegen Eigen- oder Fremdgefährdung\n\n `Quelle: help.gv.at`\n\n\n#### Berechnungen Kosten:  \n Annahme einer Heimbetreuung mit Kosten iHv € 3.500."
                          },
                          "level7": {
                            "cost": {
                              "monthly": 3500,
                              "yearly": 49000
                            },
                            "benefitnet": {
                              "monthly": 1689,
                              "yearly": 23645
                            },
                            "gap": {
                              "monthly": 1811,
                              "yearly": 25355
                            },
                            "info": "#### Pflegebedarf Stufe 7  \n Mehr als 180 Stunden pro Monat, wenn\n\n - keine zielgerichteten Bewegungen der vier Extremitäten mit funktioneller Umsetzung möglich sind oder\n - ein gleich zu achtender Zustand vorliegt\n\n `Quelle: help.gv.at`\n\n\n#### Berechnungen Kosten:  \n Annahme einer Heimbetreuung mit Kosten iHv € 3.500."
                          },
                          "mean": {
                            "cost": {
                              "monthly": 2599,
                              "yearly": 36380
                            },
                            "benefitnet": {
                              "monthly": 782,
                              "yearly": 10942
                            },
                            "gap": {
                              "monthly": 1817,
                              "yearly": 25438
                            },
                            "info": ""
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {}
                }
              }
            }
          }
        }
      }
    },
    "/profile/risks/probabilities": {
      "post": {
        "tags": [
          "Risks"
        ],
        "summary": "Yearly Probabilities",
        "description": "This service calculates the yearly probabilities for suffering from one of 8 life risks. It accepts any input from the empty object `{}` to the fully specified resource. When not specified, a parameter will range over all possible values. For example, posting the empty object `{}` will result in the average probability for the specified country. As demonstrated in the [riskine analysis](https://pro.riskine.com), this could be used in a customer journey to start from the average probabilities and individualize them step-by-step as the user specifies their parameters.  \n\nThe additional scale parameter indicates a maximum `scale` value against which all the risks fit nicely in a bars UI, e.g.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "scale": 0.24939779093796,
                        "health": 0.17457845365657,
                        "accident": 0.085926522239249,
                        "pensiongap": 0.1454,
                        "natcat": 0.1152025375,
                        "unemployment": 0.05678109960701,
                        "crime": 0.0059802504119243,
                        "death": 0.00094905564063066,
                        "legal": 0.04380361
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/risks/details": {
      "post": {
        "tags": [
          "Risks"
        ],
        "summary": "Details",
        "description": "This service is the big brother of the service `/profile/risks/probabilities`. It takes into account the full resource (although not every parameter needs to be specified) and calculates yearly probabilities for the 8 life risks as well as the constituting sub risks and moreover various damage numbers like expected natural disaster damage or expected loss in income at retirement.  \n\nThe additional `scale` parameter indicates a maximum scale value against which all the risks fit nicely in a bars UI, e.g.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "accident": {
                        "aggregate": 0.10673638438757549,
                        "aggregate-average": 0.10673638438757549,
                        "homeleisure": 0.07883508283620866,
                        "homeleisure-average": 0.07883508283620866,
                        "sport": 0.013787872642507581,
                        "sport-average": 0.013787872642507581,
                        "traffic": 0.008328566278179572,
                        "traffic-average": 0.008328566278179572,
                        "work": 0.008473984692694225,
                        "work-average": 0.008473984692694225
                      },
                      "crime": {
                        "aggregate": 0.011318398140788388,
                        "aggregate-average": 0.005775189338111164,
                        "assault": 0.0017107694616421698,
                        "assault-average": 0.0017107694616421698,
                        "burglary": 0.009624093284032575,
                        "burglary-average": 0.00407138507772653,
                        "cartheft": 0.0,
                        "cartheft-average": 0.0
                      },
                      "death": {
                        "accident": 0.00024169,
                        "accident-average": 0.00024169,
                        "aggregate": 0.00041122,
                        "aggregate-average": 0.00041122,
                        "crime": 7.81e-06,
                        "crime-average": 7.81e-06,
                        "disease": 0.0,
                        "disease-average": 0.0,
                        "predicted_age": 82.57378989898791,
                        "suicide": 0.00016172,
                        "suicide-average": 0.00016172
                      },
                      "health": {
                        "aggregate": 0.22571247278700324,
                        "aggregate-average": 0.22571247278700324,
                        "chronicdisease": 0.3629999923706055,
                        "chronicdisease-average": 0.3629999923706055,
                        "healthstatus": 0.283,
                        "healthstatus-average": 0.283,
                        "hospitaldischarges": 0.22571247278700324,
                        "hospitaldischarges-average": 0.22571247278700324,
                        "longtimecare": 0.05210753110241865,
                        "longtimecare-average": 0.0573723971376054
                      },
                      "legal": {
                        "aggregate": 0.04787861122595094,
                        "aggregate-average": 0.09172878545647023,
                        "divorce": 0.0003,
                        "divorce-average": 0.0002,
                        "dunning": 0.0727,
                        "dunning-average": 0.0475,
                        "inheritance": 0.01,
                        "inheritance-average": 0.0099,
                        "rent": 0.0292,
                        "rent-average": 0.0292,
                        "traffic": 0.00075,
                        "traffic-average": 0.00075,
                        "tutelage": 0.001,
                        "tutelage-average": 0.0029,
                        "work": 0.0073,
                        "work-average": 0.0041
                      },
                      "natcat": {
                        "aggregate": 0.19867366739083558,
                        "aggregate-average": 0.20291584357152315,
                        "cyclone": 0.0,
                        "cyclone-average": 0.0,
                        "earthquake": 0.0,
                        "earthquake-average": 8.43876800473087e-05,
                        "fire": 0.008279978029446659,
                        "fire-average": 0.00414,
                        "flood": 0.0,
                        "flood-average": 0.00301,
                        "hail": 0.0974797057581328,
                        "hail-average": 0.0358977717529517,
                        "landslide": 0.0,
                        "landslide-average": 0.000671999999999999,
                        "lightning": 0.010652522145150778,
                        "lightning-average": 0.00779643464584743,
                        "storm": 0.025386103854761588,
                        "storm-average": 0.135587922279058,
                        "tsunami": 0.0,
                        "tsunami-average": 0.0,
                        "waterleakage": 0.07150000333786011,
                        "waterleakage-average": 0.0283743209347
                      },
                      "pensiongap": {
                        "aggregate": 0.08800000190734864,
                        "aggregate-average": 0.08800000190734864,
                        "labourmarketexit": 62.0,
                        "oldagepoverty": 0.08800000190734864,
                        "oldagepoverty-average": 0.08800000190734864,
                        "yearsinretirement": 21.0
                      },
                      "unemployment": {
                        "aggregate": 0.0583345615109957,
                        "aggregate-average": 0.0583345615109957,
                        "insolvency": 0.00353918,
                        "insolvency-average": 0.00353918,
                        "insolvencyduration": 1.1,
                        "jobloss": 0.054990001022815704,
                        "jobloss-average": 0.054990001022815704
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "person.address": "Linke Wienzeile 10/4"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/risks/prioritization": {
      "post": {
        "tags": [
          "Risks"
        ],
        "summary": "Prioritization",
        "description": "This service uses the core riskine algorithm to calculate impact evaluations for the 8 life risks. On a discrete scale from 0 to 6, each of the 8 life risks is assigned a ranking or prioritization based upon their respective financial impacts. As in the riskine analysis, this can be used complementary to the life risk probability values. For example, death may have a seemingly insignificant probability in younger years, yet the financial impact can be enormous for income-dependent persons. Thus, although the risk probability values may be low, this service still indicates a possible danger and need to insure  \n\nThere is a way to ensure that all relevant parameters for the calculation were sent in the request by including the URL parameter unlock=soft|hard. A locked risk has all null entries. When unlock=soft, the risks unlock with the first relevant parameter, When unlock=hard, the risks unlock only with all relevant parameters.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "health": {
                          "total": 84,
                          "onetimeloss": 27,
                          "incomeloss": 86,
                          "statebenefit": 34
                        },
                        "accident": {
                          "total": 97,
                          "onetimeloss": 44,
                          "incomeloss": 88,
                          "statebenefit": 35
                        },
                        "pensiongap": {
                          "total": 0,
                          "onetimeloss": 0,
                          "incomeloss": 0,
                          "statebenefit": 0
                        },
                        "natcat": {
                          "total": 15,
                          "onetimeloss": 15,
                          "incomeloss": 0,
                          "statebenefit": 0
                        },
                        "unemployment": {
                          "total": 0,
                          "onetimeloss": 0,
                          "incomeloss": 0,
                          "statebenefit": 0
                        },
                        "crime": {
                          "total": 7,
                          "onetimeloss": 7,
                          "incomeloss": 0,
                          "statebenefit": 0
                        },
                        "death": {
                          "total": 10,
                          "onetimeloss": 0,
                          "incomeloss": 0,
                          "statebenefit": 0
                        },
                        "legal": {
                          "total": 15,
                          "onetimeloss": 15,
                          "incomeloss": 0,
                          "statebenefit": 0
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/risks/sentiment": {
      "get": {
        "tags": [
          "Risk Sentiment"
        ],
        "summary": "Risk Sentiment",
        "description": "Available for all countries, this service analyzes real-time trends in media, social networks, and other data sources about life-risk-related topics. It serves to give a real-time indication about what is on the mind of a general or specific user. Example: During a cluster of media events about accident-related topics, a strong trend is registered and the probability that a user has the topic present on their mind is increased to `30%` from under `10%` normally. \n\nUse cases include:  \n\n * timing of campaigns  \n\n * empowering advisors to talk about the right topics at the right time  \n\nThe 8 life risks are the 8 main topics (ids the same as in the `/profile/risks` endpoint) - accident, illness, pension gap, natural catastrophe, unemployment, crime, death, and legal. Every element in the response consists of these parameters:  \n\n| <div style=width:270px>__Sentiment Parameter__</div> | <div style=width:500px>__Description__</div> |\n| --- | --- |\n| `id` | The id of the risk |\n| `label` | Human readable label of the risk |\n| `trend-strength` | Indicator of trend strength. `0` = no trend, `1` = weak trend, `2` = strong trend. Strong trend means multiple of 3x over standard deviation |\n| `probability-cognitive-presence` | Estimated probability that the topic is on the mind of one user. Higher for stronger trends |\n| `top-subtopics` | Some keywords that represent most present topics in the trend |  \n\n **overview - how does a trend work?**  \n\n * a trend is a cumulation of media and social media events over 2-5 days  \n\n * there are about 5 trends per month and country  \n\n * during a trend, it is about on average 3 times more probable that a topic is on the mind of a user. Ex: 30% instead of 10%",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "get example": {
                    "value": [
                      {
                        "id": "accident",
                        "label": "Unfall",
                        "trend-strength": 3,
                        "probability-cognitive-presence": 0.23,
                        "top-subtopics": [
                          "severe accident in highway tunnel",
                          "car accident",
                          "traffic accident"
                        ]
                      },
                      {
                        "id": "illness",
                        "label": "Erkrankung",
                        "trending": true,
                        "trend-strength": 2,
                        "probability-cognitive-presence": 0.19,
                        "top-subtopics": [
                          "wave of flu",
                          "flu epidemic"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/profile/investment": {
      "post": {
        "tags": [
          "Risks"
        ],
        "summary": "Investment Profile",
        "description": "This service gives access to an algorithm-based investment profile. The core information in the profile is the recommended highest suitable SRRI class, which is a widely used standard to classify assets based on their risk/return dynamic. The risk profile is thus intended to accompany an advisory on specific investments - also in compliance with EU regulations.  \n\nThe needed inputs are divided into data about knowledge and experiences, risk tolerance, risk-bearing ability, and investment goals. In the profile, knowledge evaluation and risk tolerance are scored - `knowledge-evaluation` and `estimated-risk-tolerance` respectively. Estimated risk tolerance is calculated based on subjective questions and an algorithm which aims to psychologically extract the true risk tolerance instead of just asking the user for it. However, the user can override the risk tolerance with his self-assessment if he so wishes.  \n\nThe main profile parameter, `highest-suitable-srri-class` gives the highest recommended SRRI class recommended for the user. SRRI classes range from 1 to 7.  \n\nAll inputs are optional. In the output, `adequacy-test` and `suitability-test` indicate whether the set of inputs is sufficient to guarantee adequacy and suitability, respectively.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "person.investment.goals": 1,
                      "risk-bearing-ability": {
                        "person.investment.available.monthly.suggested-values": 4,
                        "person.investment.assets.liquid": 3
                      },
                      "person.investment.risktype.subjective.self-assessment": 3,
                      "risk-tolerance": 3,
                      "estimated-risk-tolerance": 5,
                      "knowledge-evaluation": 2,
                      "highest-suitable-srri-class": 3,
                      "adequacy-test": false,
                      "suitability-test": false
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "person.investment.goals": 1,
                    "recommendation.savings.invest.duration": 3,
                    "person.investment.available.monthly.suggested-values": 4,
                    "person.investment.assets.liquid": 3,
                    "person.investment.risktype.subjective.self-assessment": 3,
                    "person.investment.risktype.subjective-question1": 1,
                    "person.investment.risktype.subjective-question2": 1,
                    "person.investment.risktype.subjective-question3": 1,
                    "person.investment.risktype.subjective-question4": 1,
                    "person.investment.risktype.subjective-question5": 1,
                    "person.investment.knowledge.source": [
                      4
                    ],
                    "person.investment.knowledge.life-insurance": 4,
                    "person.investment.knowledge.bond": 4,
                    "person.investment.knowledge.funds": 4,
                    "person.investment.knowledge.shares": 4,
                    "person.investment.knowledge.mixed": 4,
                    "person.investment.knowledge.equity": 4,
                    "person.investment.knowledge.real-estate-fund": 4,
                    "person.investment.knowledge.futures-options": 4,
                    "person.investment.knowledge.pfandbrief": 4,
                    "person.investment.knowledge.government-bonds": 4,
                    "person.investment.knowledge.certificate": 4,
                    "person.investment.knowledge.foreign-currency": 4,
                    "person.investment.knowledge.money-market-instruments": 4,
                    "person.investment.frequency.mixed": 2,
                    "person.investment.frequency.life-insurance": 1,
                    "person.investment.frequency.certificate": 3,
                    "person.investment.frequency.equity": 3,
                    "person.investment.frequency.government-bonds": 3,
                    "person.investment.frequency.real-estate-fund": 3,
                    "person.investment.frequency.funds": 3,
                    "person.investment.frequency.futures-options": 3,
                    "person.investment.frequency.foreign-currency": 3,
                    "person.investment.frequency.shares": 3,
                    "person.investment.frequency.pfandbrief": 3,
                    "person.investment.frequency.money-market-instruments": 3,
                    "person.investment.frequency.bond": 3,
                    "person.birthdate": "1980-01-01"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/contracts": {
      "post": {
        "tags": [
          "Contracts"
        ],
        "summary": "Contracts",
        "description": "Define the contracts held by the user. The held contracts are either used as input to refine other content or to enrich the contract data itself.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": [
                      {
                        "insurer": "MyInsurance",
                        "type": "household",
                        "policy-number": "123-123-123",
                        "premium-amount": 123.50,
                        "premium-payment-interval": 2,
                        "expiry-date": "2030-01-01",
                        "next-step": {
                          "type": "review",
                          "reason": "Ihre Lebensumstände haben sich in den letzten Jahren geändert. Dies kann bedeuten ihr Haushalt und Ihr Besitz nicht mehr umfassend abgedeckt sind. Sie sollten daher die Abdeckung ihrer Versicherungspolizze im Detail überprüfen."
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": [
                    {
                      "insurer": "MyInsurance",
                      "policy-number": "123-123-123"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/profile/risks-corporate/prioritization": {
      "post": {
        "tags": [
          "Risks"
        ],
        "summary": "Business Risks",
        "description": "This service returns an indication which parameter in the general demands and needs analysis for corporate clients has an impact on which risk category.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "question": "organization.sector",
                        "person": 1,
                        "property": 1,
                        "financial": 1
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "qrel": "organization.sector"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/interest": {
      "post": {
        "tags": [
          "Assets, Liabilities"
        ],
        "summary": "Interest",
        "description": "This service is used for any calculation involving compound interest. It exposes a compound interest model defined by a time period with initial capital (`initial`), recurring savings amount (`recurring`), end capital (`targetvalue`) and interest rate (`interest`). As any of these can be calculated when the others are known, this endpoint can be flexibly used to find the missing parameter in various use cases. Here are the four main use cases:  \n\n * use case 1: calculate monthly savings amount (`recurring`) needed to reach a capital goal until a defined targetdate  \n\n * use case 2: calculate the capital (`targetvalue`) after a certain time period  \n\n * use case 3: calculate the needed initial capital (initial) to reach a defined capital goal after a defined time period  \n\n * use case 4: calculate the interest rate (`interest`) needed to go from an initial capital to a capital goal in a defined time period",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeTimeseries"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "initial": 10000,
                      "recurring": 117.40327497176,
                      "interest": 0.01,
                      "startdate": "2019-10-02",
                      "targetdate": "2025-01-01",
                      "targetvalue": 18000,
                      "timeseries": [
                        {
                          "time": "2019-11-01",
                          "value": 10000
                        },
                        {
                          "time": "2019-12-01",
                          "value": 10125.796046607
                        },
                        {
                          "time": "2020-01-01",
                          "value": 10251.696445828
                        },
                        {
                          "time": "2020-02-01",
                          "value": 10377.70128423
                        }
                      ]
                    }
                  },
                  "Use case 2": {
                    "value": {
                      "initial": 10000,
                      "recurring": 100,
                      "interest": 0.01,
                      "startdate": "2019-10-02",
                      "targetdate": "2025-01-01",
                      "targetvalue": 16892.320569905,
                      "timeseries": [
                        {
                          "time": "2019-11-01",
                          "value": 10000
                        },
                        {
                          "time": "2019-12-01",
                          "value": 10108.378334955
                        },
                        {
                          "time": "2020-01-01",
                          "value": 10216.846573869
                        },
                        {
                          "time": "2020-02-01",
                          "value": 10325.404791322
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "initial": 10000,
                    "startdate": "2019-10-02",
                    "targetdate": "2025-01-01",
                    "interest": 0.01,
                    "targetvalue": 18000
                  }
                },
                "Use case 2": {
                  "value": {
                    "initial": 10000,
                    "recurring": 100,
                    "startdate": "2019-10-02",
                    "targetdate": "2025-01-01",
                    "interest": 0.01
                  }
                }
              }
            }
          }
        }
      }
    },
    "/goals/annuity": {
      "post": {
        "tags": [
          "Assets, Liabilities"
        ],
        "summary": "Annuities",
        "description": "This service is used for any calculation involving annuities. It exposes an annuity model defined by two time periods: First, an accumulation phase with an initial capital (`initial`), recurring savings (`recurring`) and needed end capital after accumulation (targetvalue). Second, an annuitization phase with a recurring payout (`goal.recurring`) and a targetdate when the capital is used up (`targetdate`) - this defaults to the estimated retirement entry date. The interest (interest) rate can be defined and is taken to be constant over both periods. As any of these parameters can be calculated when the others are known, this endpoint can be flexibly used to find the missing parameter in various use cases. Here are the four main use cases:  \n\n * use case 1: calculate the initial amount (`recurring`) you need to save monthly if you want an annuity of a value for some years from the age of retirement  \n\n * use case 2: calculate the monthly annuity (`goal.recurring`) that you get from the age of retirement  \n\n * use case 3: calculate the interest rate (`interest`) needed to go from an initial capital to a defined monthly annuity in the annuitization phase",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeTimeseries"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "initial": 0,
                      "recurring": 34.946128393735,
                      "interest": 0.05,
                      "startdate": "2024-12-01",
                      "targetdate": "2054-11-01",
                      "targetvalue": 28459.285005312,
                      "timeseries": [
                        {
                          "time": "2025-01-01",
                          "value": 0
                        },
                        {
                          "time": "2025-02-01",
                          "value": 35.08850324657
                        },
                        {
                          "time": "2025-03-01",
                          "value": 70.319961398748
                        },
                        {
                          "time": "2025-04-01",
                          "value": 105.69495687252
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "goal.recurring": 160,
                    "interest": 0.05,
                    "startdate": "2024-12-01",
                    "person.birthdate": "1989-10-22",
                    "person.gender": 1
                  }
                }
              }
            }
          }
        }
      }
    },
    "/loan": {
      "post": {
        "tags": [
          "Assets, Liabilities"
        ],
        "summary": "Loans",
        "description": "This service is used for any calculation regarding loans. It exposes a loan model defined by a time period with loan amount (`initial`), recurring loan repayment rate (`recurring`), remaining debt (`targetvalue`) and interest rate (`interest`). The time period can be specified in different ways: with a start date and a target date (`startdate`, `targetdate`), with a duration in months (`duration-months`) or with a duration in years (`duration-years`).  \n\n| <div style=width:150px> __field__ </div> | <div style=width:300px> __description__ </div> |\n| --- | --- |\n| `initial` | loan amount |\n| `recurring` | recurring loan repayment rate |\n| `targetvalue` | remaining debt|\n| `interest` | interest rate |\n| `startdate` | start date of the loan |\n| `targetdate` | date of reaching targetvalue |\n| `duration-months` | duration of the loan in months |\n| `duration-years` | duration of the loan in years |\n| `periods-per-year` | number of recurring payments per year |  \n\nAs any of these can be calculated when the others are known, this endpoint can be flexibly used to find the missing parameter in various use cases. Here are the five main use cases:  \n\n * use case 1: calculate recurring loan repayment rate (`recurring`) needed to repay a loan in a defined time period  \n\n * use case 2: calculate the loan amount (`initial`) that one can get if he pays a defined recurring loan repayment rate in a defined time period  \n\n * use case 3: calculate the remaining debt (`targetvalue`) after a certain time period  \n\n * use case 4: calculate the interest rate (`interest`) needed to repay a loan in a defined time period  \n\n * use case 5: calculate the time period (`startdate`,`targetdate`,`duration-months`,`duration-years`) needed to repay a loan with a defined recurring loan repayment rate",
        "parameters": [
          {
            "$ref": "#/components/parameters/includeTimeseries"
          },
          {
            "name": "correctCashflowSign",
            "in": "query",
            "description": "If true, the `recurring` and `targetvalue` are negative because they represent negative cashflow",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "initial": 100000,
                      "recurring": 536.01355531965,
                      "interest": 0.02625,
                      "startdate": "2020-05-05",
                      "targetdate": "2040-05-05",
                      "duration-months": 240,
                      "duration-years": 20,
                      "targetvalue": 0,
                      "periods-per-year": 12
                    }
                  },
                  "Use case 2": {
                    "value": {
                      "initial": 10356.175308336,
                      "recurring": 100,
                      "interest": 0.03,
                      "startdate": "2020-06-01",
                      "targetdate": "2030-06-01",
                      "duration-months": 120,
                      "duration-years": 10,
                      "targetvalue": 0,
                      "periods-per-year": 12
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "initial": 100000,
                    "duration-years": 20,
                    "interest": 0.02625,
                    "targetvalue": 0
                  }
                },
                "Use case 2": {
                  "value": {
                    "startdate": "2020-06-01",
                    "targetdate": "2030-06-01",
                    "interest": 0.03,
                    "recurring": 100,
                    "targetvalue": 0
                  }
                }
              }
            }
          }
        }
      }
    },
    "/model/parse": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "summary": "Natural Language Understanding (NLU)",
        "description": "This service capsules riskine's insurance-and-financial-specific natural language understanding model. It is available in `de` and `en`. Behind are several natural language models that can analyze intent, entity, and other tags from an open-ended text. The models are retrained perpetually with growing insurance- and finance-specific training data. The service is used for  \n\n - chatbots\n - media text analysis\n - E-Mail and other communication parsing",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "main example": {
                    "value": {
                      "intent": {
                        "name": "request_info_product",
                        "confidence": 0.9994992613792419
                      },
                      "entities": [
                        {
                          "entity": "productgroup",
                          "start": 22,
                          "end": 40,
                          "value": "Unfallversicherung",
                          "extractor": "DIETClassifier",
                          "orig_value": "unfallversicherung",
                          "id": "accident",
                          "conf_spell_check": 1.0
                        },
                        {
                          "entity": "term",
                          "start": 22,
                          "end": 40,
                          "value": "unfallversicherung",
                          "extractor": "DIETClassifier"
                        }
                      ],
                      "text": "ich haette gerne eine unfallversicherung",
                      "intent_ranking": [
                        {
                          "name": "request_info_product",
                          "confidence": 0.9994992613792419
                        },
                        {
                          "name": "faq_accident_insurance_children",
                          "confidence": 0.0003873867681249976
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "main example": {
                  "value": {
                    "text": "Ich hätte gerne eine Unfallversicherung"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/addresses": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Addresses",
        "description": "This service is used to validate an address data set against the riskine address database. The service will return an array of matches from the database including an ID. It is intended to be used as a pre-validation of address parameters prior to using the other services. As the riskine algorithm takes into account elementary risk on a GPS-exact basis, posting validated addresses is important for exact calculation. Once matched, the ID `adresseid` can be used to quickly match the address in the future. The ID is the same across all services.  \n\nThe `/addresses` service was designed with the consideration in mind hat every client may have addresses of their users which are incomplete, contain typos or are generally written down in a non-standard way. Using this service, clients of the __riskine API__ could also implement validation routines to prompt their users with suggestions of correct addresses during the customer journey (As in the [riskine analysis](https://www.riskine.com/analyse)).  \n\nNote a few things about usage:  \n\n * The result will always be a list of matches  \n\n * It is intended for clients to fill the parameters partially and display several matches to the user to choose from  \n\n * Address Parameters should be matched in order - `person.address.postcode`, `person.address.city`, `person.address.street`, `person.address.housenumber`  \n\n * The below table lists which kind of requests yield which kind of results  \n\n| <div style=width:220px> __Input__ </div> | <div style=width:220px> __Output__ </div> | <div style=width:220px> __have to be matched exactly__ </div> |\n| --- | --- | --- |\n| `person.address.postcode` | `person.address.postcode`, `person.address.city` | - |\n| `person.address.postcode`, `person.address.city`, `person.address.street` | `person.address.postcode`, `person.address.city`, `person.address.street` | `person.address.postcode`, `person.address.city` |\n| `person.address.postcode`, `person.address.city`, `person.address.street`, `person.address.housenumber` | `person.address.postcode`, `person.address.city`, `person.address.street`, `person.address.housenumber` | `person.address.postcode`, `person.address.city`, `person.address.street` |",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "id": 1352138803,
                      "bundesland": 9,
                      "plz": 1040,
                      "ort": "Wien",
                      "strassenname": "Linke Wienzeile",
                      "hausnummer": null
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "person.address.city": "Wien",
                    "person.address.postcode": "1060",
                    "person.address.street": "Linke Wienzeile"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/industrysectors": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Industry Sectors",
        "description": "Returns a list of industry sectors matching the search term.",
        "parameters": [
          {
            "$ref": "#/components/parameters/locale"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "organization.company.type.nace.number": "5312",
                          "organization.company.type": "teaching assistant in primary schools",
                          "organization.industry-group": "education"
                        },
                        {
                          "organization.company.type.nace.number": "5312",
                          "organization.company.type": "teaching assistant in special educational needs",
                          "organization.industry-group": "education"
                        },
                        {
                          "organization.company.type.nace.number": "5312",
                          "organization.company.type": "teaching assistant in secondary schools",
                          "organization.industry-group": "education"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "organization.company.type": "teaching assistant in"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/professions": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Professions",
        "description": "Returns a list of professions matching the search term.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "person.work.occupation.isco.number": "5312",
                          "person.work.occupation": "teaching assistant in primary schools"
                        },
                        {
                          "person.work.occupation.isco.number": "5312",
                          "person.work.occupation": "teaching assistant in special educational needs"
                        },
                        {
                          "person.work.occupation.isco.number": "5312",
                          "person.work.occupation": "teaching assistant in secondary schools"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "person.work.occupation": "teaching assistant in"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/income": {
      "post": {
        "tags": [
          "Incomes, Spendings"
        ],
        "summary": "Income",
        "description": "This service exposes a gross/net tax model. Its most simple use case is as a gross net calculator. Given a job description and either net monthly or gross monthly income, this calculates the missing value in accordance with the law in the specified country. This service also indicates the annual income, 12 times monthly income, based on the gross or net monthly income.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "gross": 2500,
                        "net": 1873.65,
                        "gross.yearly": 30000,
                        "net.yearly": 22483.8
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "person.work.income.gross.monthly": 2500,
                    "person.work.professiontype": 1,
                    "person.family.incomedepending": [
                      2
                    ],
                    "person.birthdate": "1980-01-01",
                    "person.children": [
                      [
                        "2008-01-12",
                        0,
                        1
                      ]
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cards": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Cards",
        "description": "There are info-cards available for various topics like risks, insurance products, list types like industry sectors. Info-cards contain a title, a description text and an image. Get infocards with this service in various formats to support the advisory with auxiliary information where needed.",
        "parameters": [
          {
            "name": "area",
            "description": "Specifies the question for which the images are requested. If the question is within a group, area would be set with the groupname of this group, otherwise with the paramname the question.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "description": "Possible format values are base64, svg and url describing the data value.",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "base64",
                "svg",
                "url"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "id": "gastronomy",
                      "title": "Gastronomie",
                      "infotext": "",
                      "risk": "usachwerte",
                      "image": {
                        "data": "/9j/4AAQSk...",
                        "format": "base64"
                      },
                      "mediatype": "jpg"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "branche": "224",
                    "besitztum": [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6,
                      7
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/enginepower": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Enginepower",
        "description": "Calculates PS from kW and vice versa.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "unit_ps": 1358.26,
                        "unit_kw": 999
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "unit_kw": 999
                  }
                }
              }
            }
          }
        }
      }
    },
    "/edges/{path}": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "summary": "Visualization of Question Path",
        "description": "This service can be used to create a visualization of a question path. Returns all edges relevant for the visualization.",
        "parameters": [
          {
            "$ref": "#/components/parameters/path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "data": {
                            "source": "e5187660-9cc5-4958-9474-ef5692902b5a",
                            "label": "BEFORE",
                            "annotation": [
                              "customer is over 18 years of age"
                            ],
                            "id": "a8d669c1-05d9-430c-bc95-e64d69dafa77",
                            "nodegroup": "",
                            "target": "c4da6bc5-aeca-4380-bbc7-4c987256a950"
                          },
                          "classes": "before"
                        },
                        {
                          "data": {
                            "source": "b5d89912-f7b3-414f-bbd3-343054e9c9ee",
                            "label": "OPTION",
                            "id": "cf352540-f2bc-417d-aabe-03ab28e89785",
                            "nodegroup": "b5d89912-f7b3-414f-bbd3-343054e9c9ee",
                            "target": "5d3723fc-6303-426c-83a3-fb4ae7e19d00"
                          },
                          "classes": "option"
                        },
                        {
                          "data": {
                            "id": "66da907f-e521-4f8c-b222-463f850c1fdc",
                            "source": "2ce440d1-5b33-4691-9dba-a0eba9c17ceb",
                            "target": "3cf331b8-a7ad-4627-9170-02fc9360e09f",
                            "label": "RECOMMEND"
                          },
                          "classes": "recommend"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "riskine.com/edges/pension-insurance": ""
                  }
                }
              }
            }
          }
        }
      }
    },
    "/makes/car": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Car Makes",
        "description": "Returns a list of car makes matching the search term.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "id": 8,
                          "automarke": "Cadillac"
                        },
                        {
                          "id": 32,
                          "automarke": "Lada"
                        },
                        {
                          "id": 33,
                          "automarke": "Lamborghini"
                        },
                        {
                          "id": 34,
                          "automarke": "Lancia"
                        },
                        {
                          "id": 35,
                          "automarke": "Land Rover"
                        },
                        {
                          "id": 43,
                          "automarke": "McLaren"
                        },
                        {
                          "id": 66,
                          "automarke": "Tesla"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "automarke": "la"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/makes/motorcycle": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Motorcycle Makes",
        "description": "Returns a list of motorcycle makes matching the search term.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "id": 50,
                          "motorradmarke": "Hsun"
                        },
                        {
                          "id": 53,
                          "motorradmarke": "Hyosung"
                        },
                        {
                          "id": 105,
                          "motorradmarke": "Suzuki"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "motorradmarke": "su"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/countries": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Countries",
        "description": "Returns a list of countries matching the search term.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "iso_code": "ARE",
                          "country": "United Arab Emirates"
                        },
                        {
                          "iso_code": "GBR",
                          "country": "United Kingdom (UK)"
                        },
                        {
                          "iso_code": "USA",
                          "country": "United States of America"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "country": "united"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nationalities": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Nationalities",
        "description": "Returns a list of nationalities matching the search term.",
        "parameters": [
          {
            "$ref": "#/components/parameters/locale"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "id": 129,
                          "nationality": "Mozambican"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "nationality": "moza"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/risksport": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Risk Sports",
        "description": "Returns a list of risk sports matching the search term.",
        "parameters": [
          {
            "$ref": "#/components/parameters/locale"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "id": 68,
                          "risksport": "Diving  Without breathing equipment"
                        },
                        {
                          "id": 69,
                          "risksport": "Diving (w/respiration equipment) > 80m"
                        },
                        {
                          "id": 70,
                          "risksport": "Diving (w/respiration equipment) up to 40"
                        },
                        {
                          "id": 95,
                          "risksport": "Skydiving"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "risksport": "div"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/{path}": {
      "get": {
        "tags": [
          "Conversation"
        ],
        "summary": "Visualization of given workflow",
        "description": "This service can be used to create a visualization of a question path. Returns all nodes relevant for the visualization.  \n\n(The rest of the result was omitted)",
        "parameters": [
          {
            "$ref": "#/components/parameters/path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "data": {
                            "id": "156cb3bb-e02c-42ab-942d-e4be8711e2cc",
                            "textlabel": "Vorname",
                            "nodegroup": "",
                            "parent": "01f88390-a7ef-4003-b08d-09e80d4ba8aa"
                          },
                          "classes": "question"
                        },
                        {
                          "data": {
                            "id": "73ac5b4f-fe07-4bc1-aff1-95d06c9139f8",
                            "product": "PENS001",
                            "productname": "CustomPensionProduct"
                          },
                          "classes": "product"
                        },
                        {
                          "data": {
                            "id": "0dfc4e0a-f0c6-43ac-8bf4-8831430a5108",
                            "templatename": "InfoText"
                          },
                          "classes": "template"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "riskine.com/nodes/pension-insurance": ""
                  }
                }
              }
            }
          }
        }
      }
    },
    "/licensingdistrict": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Licensing District",
        "description": "Returns a list of licensing district(s) matching the search term.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": [
                        {
                          "id": 44,
                          "zulassungsbezirk": "KO Korneuburg"
                        },
                        {
                          "id": 64,
                          "zulassungsbezirk": "ND Neusiedl/See"
                        },
                        {
                          "id": 65,
                          "zulassungsbezirk": "NK Neunkirchen"
                        },
                        {
                          "id": 95,
                          "zulassungsbezirk": "WB Wr. Neustadt/Bezirk"
                        },
                        {
                          "id": 98,
                          "zulassungsbezirk": "WN Wr. Neustadt BPD"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "zulassungsbezirk": "neu"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/diff/percent": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Subtract Percentages",
        "description": "Subtracts provided percent values from 100. Parameters provided in the body must be prefixed with `diff`.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "result": 55
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "diff-a": 20,
                    "diff-b": 20,
                    "diff-c": 5
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sum": {
      "post": {
        "tags": [
          "Support Services"
        ],
        "summary": "Sum Parameters",
        "description": "Sums up provided parameters. Parameters need to be prefixed with `sum`.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "result": 555
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "sum-a": 123,
                    "sum-b": 321,
                    "sum-c": 111
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schema/textlabels/resolve": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "summary": "Resolve Textlabels",
        "description": "Clients typically want to store data in their DB like this: `person.gender: 2` and not like this: `Gender`: `female`, yet the labels are needed when displaying the data. This service provides a way to get the appropriate textlabels for all questions/answers in the graph from the API on-demand and in bulk.",
        "parameters": [
          {
            "$ref": "#/components/parameters/countryparameter"
          },
          {
            "$ref": "#/components/parameters/locale"
          },
          {
            "name": "labelformat",
            "in": "query",
            "description": "`normal` or empty for the usual question textlabels, `short` for the short labels and `long` for the long labels.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/context"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "returncode": 0,
                      "result": {
                        "person.gender": {
                          "question": "What is your gender?",
                          "answer": "female"
                        },
                        "person.birthdate": {
                          "question": "What is your date of birth?",
                          "answer": "03.02.1980"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "person.gender": 2,
                    "person.birthdate": "1980-02-03"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schema/textlabels/questioncategories": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "summary": "Questioncategories",
        "description": "This service provides the name and label of questioncategories. Questions returned by `/conversation/questions` might have the string property `questioncategory` set. This is the key for the object returned by this service. So this service can be used to get associated labels, which should be rendered in the frontend as the header of a questioncategory. If the body is left empty all questioncategories will be returned. An array of names can be provided in the body to only return specific questioncategories.",
        "parameters": [
          {
            "$ref": "#/components/parameters/countryparameter"
          },
          {
            "$ref": "#/components/parameters/locale"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "employee": "Mitarbeiter/in",
                      "organization": "Firmendaten"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "organization": "",
                    "employee": ""
                  }
                }
              }
            }
          }
        }
      }
    },
    "/schema/questions/{question}/validation": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "summary": "Complex Validation",
        "description": "The API provides this service to perform complex validations which are validations involving 2 parameters or more. When the field `validate-complex` is populated, the client is expected to call the validation service before calling the `/questions` service again. The service url `service` and the expected parameters `parameters` will be provided - the result of the validation call can be either a success response with empty body or an error response with the appropriate validation message to show to the user.  \n\nThe path parameter `{paramname}` is required. The paramname of the Question that triggered the validation must be supplied.",
        "parameters": [
          {
            "$ref": "#/components/parameters/countryparameter"
          },
          {
            "$ref": "#/components/parameters/locale"
          },
          {
            "name": "path",
            "in": "query",
            "description": "Question path",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/context"
          },
          {
            "$ref": "#/components/parameters/question"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {}
                  },
                  "Use case 2": {
                    "value": {
                      "validatehint": "Driving license acquiration age must be earlier."
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "object.vehicle.driver.age": "30",
                    "object.vehicle.driver.license.age": "29"
                  }
                },
                "Use case 2": {
                  "value": {
                    "object.vehicle.driver.age": "30",
                    "object.vehicle.driver.license.age": "35"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/paths/{path}/questions": {
      "post": {
        "tags": [
          "Conversation"
        ],
        "summary": "Path",
        "description": "Get all paramnames of questions that can occur in a path as an array, sorted by their occurrence in the path (topological sorting). Questions that can occur multiple times in a path (like `object.animal.cat[1].birthdate`, `object.animal.cat[2].birthdate`, etc.) are output with a wildcard (`object.animal.cat[*].birthdate`) instead of the numeric index that you see in the response of `/conversation/questions`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/context"
          },
          {
            "$ref": "#/components/parameters/path"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "examples": {
                  "Use case 1": {
                    "value": {
                      "response": [
                        "person.health.health-private.priority",
                        "person.investment.financialsecurity.priority",
                        "person.sport.habit",
                        "person.health.smoke.habit.one",
                        "person.birthdate",
                        "object.animal.type.select",
                        "object.home.type",
                        "object.home.size.total",
                        "person.asset.realestate.principal",
                        "object.vehicle.type.owned",
                        "object.vehicle.value",
                        "person.family.partner",
                        "person.education.level",
                        "person.work.professiontype",
                        "person.family.incomedepending",
                        "person.work.income.taxclass",
                        "person.work.income.net.monthly",
                        "person.work.income.gross.monthly",
                        "contract.health.partner.type",
                        "person.name.last",
                        "person.name.first",
                        "person.gender",
                        "person.address.housenumber",
                        "person.address.street",
                        "person.address.city",
                        "person.address.postcode"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "Use case 1": {
                  "value": {
                    "organization": "",
                    "employee": ""
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about riskine and the solutions based on this API",
    "url": "http://riskine.com"
  },
  "components": {
    "parameters": {
      "countryparameter": {
        "name": "country",
        "in": "query",
        "description": "Set the country for this service call if it was not set in the advisory",
        "schema": {
          "$ref": "#/components/schemas/country"
        }
      },
      "includeTimeseries": {
        "name": "includeTimeseries",
        "in": "query",
        "description": "`true` or `false` - if true, the response includes a monthly timeseries for e.g. a diagram",
        "schema": {
          "type": "boolean"
        }
      },
      "locale": {
        "name": "locale",
        "in": "query",
        "description": "Language defined by 2 characters. `de`, `en`, etc",
        "schema": {
          "type": "string"
        }
      },
      "context": {
        "name": "context",
        "in": "query",
        "description": "Context filter",
        "schema": {
          "type": "string"
        }
      },
      "path": {
        "name": "path",
        "in": "path",
        "description": "Question path in the conversation model",
        "schema": {
          "type": "string"
        }
      },
      "externalId": {
        "name": "externalId",
        "in": "path",
        "description": "Freely chosen id for clients to reference back to their advisory",
        "schema": {
          "type": "string"
        }
      },
      "conversationId": {
        "name": "id",
        "in": "path",
        "description": "Conversation Id generated by the conversation API. UUID format.",
        "schema": {
          "type": "string"
        }
      },
      "question": {
        "name": "question",
        "in": "path",
        "description": "Identifier of the question.",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "country": {
        "type": "string",
        "enum": [
          "de",
          "at",
          "ch",
          "es",
          "it",
          "nl",
          "jp"
        ]
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "description": "This is the main authentication mechanism for the API. Every service except the token service expects you to include a token in the Authorization header. Tokens are obtained from the [token service](#tag/Integration/paths/~1gettoken/get) and last for 14 days. They carry your identification and information about your permissions as well.",
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "basicAuth": {
        "description": "Used in the [token service](#tag/Integration/paths/~1gettoken/get) to get API tokens. Receive your basic auth credentials when you create your API account.",
        "type": "http",
        "scheme": "basic"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}