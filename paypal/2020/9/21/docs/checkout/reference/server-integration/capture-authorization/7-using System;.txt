using System;
using System.Collections.Generic;
using System.Threading.Tasks;
//1. Import the PayPal SDK client that was created in `Set up Server-Side SDK`.
using Samples;
using PayPalCheckoutSdk.Payments;
using BraintreeHttp;

namespace Samples.AuthorizeIntentExamples
{
  public class CaptureAuthorizationSample
  {
    //2. Set up your server to receive a call from the client
    // Use this method to capture the payment on the approved authorization.
    public async static Task<HttpResponse> CaptureAuth(string AuthorizationId, bool debug = false)
    {
      var request = new AuthorizationsCaptureRequest(AuthorizationId);
      request.Prefer("return=representation");
      request.RequestBody(new CaptureRequest());
      //3. Call PayPal to capture an authorization.
      var response = await PayPalClient.client().Execute(request);
      //4. Save the capture ID to your database for future reference.
      if (debug)
      {
        var result = response.Result<Capture>();
        Console.WriteLine("Status: {0}", result.Status);
        Console.WriteLine("Order Id: {0}", result.Id);
        Console.WriteLine("Links:");
        foreach (LinkDescription link in result.Links)
        {
          Console.WriteLine("\t{0}: {1}\tCall Type: {2}", link.Rel,
                                  link.Href,
                                  link.Method);
        }
        Console.WriteLine("Response JSON: \n {0}",
                    PayPalClient.ObjectToJSONString(result));
      }

      return response;
    }

    static void Main(string[] args)
    {
      string AuthId = " REPLACE-WITH-VALID-APPROVED-AUTH-ID";
      CaptureAuth(AuthId, true).Wait();
    }
  }
}
copy