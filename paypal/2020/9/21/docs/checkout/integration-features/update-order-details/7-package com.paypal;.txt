package com.paypal;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.json.JSONObject;

import com.braintreepayments.http.HttpResponse;
import com.braintreepayments.http.serializer.Json;
import com.paypal.orders.AmountBreakdown;
import com.paypal.orders.AmountWithBreakdown;
import com.paypal.orders.LinkDescription;
import com.paypal.orders.Money;
import com.paypal.orders.Order;
import com.paypal.orders.OrdersGetRequest;
import com.paypal.orders.OrdersPatchRequest;
import com.paypal.orders.Patch;

/*
*
*1. Import the PayPal SDK client that was created in `Set up the Server SDK`.
*This step extends the SDK client.  It's not mandatory to extend the client, you can also inject it.
*/
public class PatchOrder extends PayPalClient {

    //2. Set up your server to receive a call from the client
    /**
     * Method to patch order
     *
     * @throws IOException Exceptions from API, if any
     */
    public void patchOrder(String orderId) throws IOException {
        OrdersPatchRequest request = new OrdersPatchRequest(orderId);
        request.requestBody(buildRequestBody());
        client().execute(request);
        OrdersGetRequest getRequest = new OrdersGetRequest(orderId);
        //3. Call PayPal to patch the transaction
        HttpResponse<Order> response = client.execute(getRequest);
        System.out.println("After Patch:");
        System.out.println("Order ID: " + response.result().id());
        System.out.println("Intent: " + response.result().intent());
        System.out.println("Links: ");
        for (LinkDescription link : response.result().links()) {
            System.out.println("\t" + link.rel() + ": " + link.href() + "\tCall Type: " + link.method());
        }
        System.out.println("Gross Amount: " + response.result().purchaseUnits().get(0).amount().currencyCode() + " "
                + response.result().purchaseUnits().get(0).amount().value());
        System.out.println("Full response body:");
        System.out.println(new JSONObject(new Json().serialize(response.result())).toString(4));
    }

    /**
     * Method to create body for patching the order.
     *
     * @return List<Patch> list of patches to be made
     * @throws IOException
     */
    private List<Patch> buildRequestBody() throws IOException {
        List<Patch> patches = new ArrayList<>();
        patches.add(new Patch().op("replace").path("/intent").value("CAPTURE"));
        patches.add(new Patch().op("replace").path("/purchase_units/@reference_id=='PUHF'/amount")
                .value(new AmountWithBreakdown().currencyCode("USD").value("200.00")
                        .breakdown(new AmountBreakdown().itemTotal(new Money().currencyCode("USD").value("180.00"))
                                .taxTotal(new Money().currencyCode("USD").value("20.00")))));
        return patches;
    }

    public static void main(String[] args) throws IOException {
        new PatchOrder().patchOrder("REPLACE-WITH-VALID-ORDER-ID");
    }
}
copy