class normalizePhoneNumberTask extends AsyncTask<String, Void, String> {

    //input your app key and secret from the Sinch dashboard
    private String appKey = "your_app_key";
    private String appSecret = "your_app_secret";

     //takes phone number string as an argument
     @Override
     protected String doInBackground(String... params) {

         String normalizedPhoneNumber = "";

         try {
             //get ready to make a get request to normalize the phone number
             HttpClient httpclient = new DefaultHttpClient();
             HttpGet httpGet = new HttpGet("https://callingapi.sinch.com/v1/calling/query/number/" + params[0].replaceAll("\\s+",""));

             //sinch uses basic authentication
             String usernamePassword = "application:" + appKey + ":" + appSecret;
             String encoded = Base64.encodeToString(usernamePassword.getBytes(), Base64.NO_WRAP);
             httpGet.addHeader("Authorization", "Basic " + encoded);

             //handle the response
             HttpResponse response = httpclient.execute(httpGet);
             ResponseHandler<String> handler = new BasicResponseHandler();

             //parse JSON response from Sinch to get phone number
             normalizedPhoneNumber = parseJSONResponse(handler.handleResponse(response));
         } catch (ClientProtocolException e) {
             Log.d("ClientProtocolException", e.getMessage());
         } catch (IOException e) {
             Log.d("IOException", e.getMessage());
         }

         return normalizedPhoneNumber;
     }

     //once the asynctask is complete, display a toast message with the normalized phone number
     @Override
     protected void onPostExecute(String normalizedPhoneNumber) {
         //if you want to make a call with sinch, this is the place to do it!
         Toast.makeText(getApplicationContext(), normalizedPhoneNumber, Toast.LENGTH_LONG).show();
     }

     //the sinch api returns a json like {"number":{"restricted":false,"countryId":"US","numberType":"Mobile","normalizedNumber":"+16507141052"}}
     //this method will return a string of just the phone number, +16507141052
     private String parseJSONResponse(String jsonString) {

         String returnString = "";

         try {
             JSONObject jsonObject = new JSONObject(jsonString);
             returnString = jsonObject.getJSONObject("number").getString("normalizedNumber");
         } catch (JSONException e) {
             Log.d("JSONException", e.getMessage());
         }

         return returnString;
     }
}
