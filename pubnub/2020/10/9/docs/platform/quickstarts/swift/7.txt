// Add listener event callbacks
listener.didReceiveMessage = { [weak self] event in
  if let entry = try? event.payload.codableValue.decode(EntryUpdate.self) {

    self?.display(
      Message(messageType: "[MESSAGE: received]", messageText: "entry: \(entry.entry), update: \(entry.update)")
    )
  }
}

listener.didReceivePresence = { [weak self] event in
  let userChannelDescription = "event uuid: \(event.metadata?.codableValue["pn_uuid"] ?? "null"), channel: \(event.channel)"

  self?.display(
    Message(messageType: "[PRESENCE: \(event.metadata?.codableValue["pn_action"] ?? "null")]", messageText: userChannelDescription)
  )
}

listener.didReceiveSubscriptionChange = { [weak self] event in
  switch event {
  case .subscribed(let channels, _):
    self?.display(Message(messageType: "[SUBSCRIPTION CHANGED: new channels]", messageText: "channels added: \(channels[0].id)"))
    self?.publish(update: EntryUpdate(update: "Harmless."))
  default: break
  }
}

listener.didReceiveStatus = { [weak self] event in
  switch event {
  case .success(let connection):
    self?.display(Message(messageType: "[STATUS: connection]", messageText: "state: \(connection)"))
  case .failure(let error):
    print("Status Error: \(error.localizedDescription)")
  }
}

return listener
}()

// Start receiving subscription events
func startListening() {
  if let listener = listener {
    pubnub.add(listener)
  }
}
show all 45 lineshide 30 linesCopy