import (    pubnub "github.com/pubnub/go")listener := pubnub.NewListener()go func() {    for {        select {        case signal := <-listener.Signal:            //Channel            fmt.Println(signal.Channel)            //Subscription            fmt.Println(signal.Subscription)            //Payload            fmt.Println(signal.Message)            //Publisher ID            fmt.Println(signal.Publisher)            //Timetoken            fmt.Println(signal.Timetoken)        case status := <-listener.Status:            switch status.Category {            case pubnub.PNDisconnectedCategory:                // this is the expected category for an unsubscribe. This means there                // was no error in unsubscribing from everything            case pubnub.PNConnectedCategory:                // this is expected for a subscribe, this means                // there is no error or issue whatsoever            case pubnub.PNReconnectedCategory:                // this usually occurs if subscribe temporarily fails but reconnects.                // This means there was an error but there is no longer any issue            case pubnub.PNAccessDeniedCategory:                // this means that PAM does allow this client to subscribe to this                // channel and channel group configuration. This is another explicit error            }        case message := <-listener.Message:            //Channel            fmt.Println(message.Channel)            //Subscription            fmt.Println(message.Subscription)            //Payload            fmt.Println(message.Message)            //Publisher ID            fmt.Println(message.Publisher)            //Timetoken            fmt.Println(message.Timetoken)        case presence := <-listener.Presence:            fmt.Println(presence.Event)            //Channel            fmt.Println(presence.Channel)            //Subscription            fmt.Println(presence.Subscription)           //Timetoken            fmt.Println(presence.Timetoken)           //Occupancy            fmt.Println(presence.Occupancy)        case uuidEvent := <-listener.UUIDEvent:            fmt.Println(fmt.Sprintf("uuidEvent.Channel: %s", uuidEvent.Channel))            fmt.Println(fmt.Sprintf("uuidEvent.SubscribedChannel: %s", uuidEvent.SubscribedChannel))            fmt.Println(fmt.Sprintf("uuidEvent.Event: %s", uuidEvent.Event))            fmt.Println(fmt.Sprintf("uuidEvent.UUID: %s", uuidEvent.UUID))            fmt.Println(fmt.Sprintf("uuidEvent.Description: %s", uuidEvent.Description))            fmt.Println(fmt.Sprintf("uuidEvent.Timestamp: %s", uuidEvent.Timestamp))            fmt.Println(fmt.Sprintf("uuidEvent.Name: %s", uuidEvent.Name))            fmt.Println(fmt.Sprintf("uuidEvent.ExternalID: %s", uuidEvent.ExternalID))            fmt.Println(fmt.Sprintf("uuidEvent.ProfileURL: %s", uuidEvent.ProfileURL))            fmt.Println(fmt.Sprintf("uuidEvent.Email: %s", uuidEvent.Email))            fmt.Println(fmt.Sprintf("uuidEvent.Updated: %s", uuidEvent.Updated))            fmt.Println(fmt.Sprintf("uuidEvent.ETag: %s", uuidEvent.ETag))            fmt.Println(fmt.Sprintf("uuidEvent.Custom: %v", uuidEvent.Custom))        case channelEvent := <-listener.ChannelEvent:            fmt.Println(fmt.Sprintf("channelEvent.Channel: %s", channelEvent.Channel))            fmt.Println(fmt.Sprintf("channelEvent.SubscribedChannel: %s", channelEvent.SubscribedChannel))            fmt.Println(fmt.Sprintf("channelEvent.Event: %s", channelEvent.Event))            fmt.Println(fmt.Sprintf("channelEvent.Channel: %s", channelEvent.Channel))            fmt.Println(fmt.Sprintf("channelEvent.Description: %s", channelEvent.Description))            fmt.Println(fmt.Sprintf("channelEvent.Timestamp: %s", channelEvent.Timestamp))            fmt.Println(fmt.Sprintf("channelEvent.Updated: %s", channelEvent.Updated))            fmt.Println(fmt.Sprintf("channelEvent.ETag: %s", channelEvent.ETag))            fmt.Println(fmt.Sprintf("channelEvent.Custom: %v", channelEvent.Custom))        case membershipEvent := <-listener.MembershipEvent:            fmt.Println(fmt.Sprintf("membershipEvent.Channel: %s", membershipEvent.Channel))            fmt.Println(fmt.Sprintf("membershipEvent.SubscribedChannel: %s", membershipEvent.SubscribedChannel))            fmt.Println(fmt.Sprintf("membershipEvent.Event: %s", membershipEvent.Event))            fmt.Println(fmt.Sprintf("membershipEvent.Channel: %s", membershipEvent.Channel))            fmt.Println(fmt.Sprintf("membershipEvent.UUID: %s", membershipEvent.UUID))            fmt.Println(fmt.Sprintf("membershipEvent.Description: %s", membershipEvent.Description))            fmt.Println(fmt.Sprintf("membershipEvent.Timestamp: %s", membershipEvent.Timestamp))            fmt.Println(fmt.Sprintf("membershipEvent.Custom: %v", membershipEvent.Custom))        case messageActionsEvent := <-listener.MessageActionsEvent:            fmt.Println(fmt.Sprintf("messageActionsEvent.Channel: %s", messageActionsEvent.Channel))            fmt.Println(fmt.Sprintf("messageActionsEvent.SubscribedChannel: %s", messageActionsEvent.SubscribedChannel))            fmt.Println(fmt.Sprintf("messageActionsEvent.Event: %s", messageActionsEvent.Event))            fmt.Println(fmt.Sprintf("messageActionsEvent.Data.ActionType: %s", messageActionsEvent.Data.ActionType))            fmt.Println(fmt.Sprintf("messageActionsEvent.Data.ActionValue: %s", messageActionsEvent.Data.ActionValue))            fmt.Println(fmt.Sprintf("messageActionsEvent.Data.ActionTimetoken: %s", messageActionsEvent.Data.ActionTimetoken))            fmt.Println(fmt.Sprintf("messageActionsEvent.Data.MessageTimetoken: %s", messageActionsEvent.Data.MessageTimetoken))        case file := <-listener.File:            fmt.Println(fmt.Sprintf("file.File.PNMessage.Text: %s", file.File.PNMessage.Text))            fmt.Println(fmt.Sprintf("file.File.PNFile.Name: %s", file.File.PNFile.Name))            fmt.Println(fmt.Sprintf("file.File.PNFile.ID: %s", file.File.PNFile.ID))            fmt.Println(fmt.Sprintf("file.File.PNFile.URL: %s", file.File.PNFile.URL))            fmt.Println(fmt.Sprintf("file.Channel: %s", file.Channel))            fmt.Println(fmt.Sprintf("file.Timetoken: %d", file.Timetoken))            fmt.Println(fmt.Sprintf("file.SubscribedChannel: %s", file.SubscribedChannel))            fmt.Println(fmt.Sprintf("file.Publisher: %s", file.Publisher))        }    }}show all 109 lineshide 94 linesCopy