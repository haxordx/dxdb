// Adding listener.[pubnub addListener:self];// Callbacks listed below.- (void)client:(PubNub *)pubnub didReceiveMessage:(PNMessageResult *)message {    NSString *channel = message.data.channel; // Channel on which the message has been published    NSString *subscription = message.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed    NSNumber *timetoken = message.data.timetoken; // Publish timetoken    id msg = message.data.message; // Message payload    NSString *publisher = message.data.publisher; // Message publisher}- (void)client:(PubNub *)pubnub didReceiveSignal:(PNSignalResult *)signal {    NSString *channel = message.data.channel; // Channel on which the signal has been published    NSString *subscription = message.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed    NSNumber *timetoken = message.data.timetoken; // Signal timetoken    id msg = message.data.message; // Signal payload    NSString *publisher = message.data.publisher; // Signal publisher}- (void)client:(PubNub *)pubnub didReceiveMessageAction:(PNMessageActionResult *)action {    NSString *channel = action.data.channel; // Channel on which the message has been published    NSString *subscription = action.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed    NSString *event = action.data.event; // Can be: added or removed    NSString *type = action.data.action.type; // Message action type    NSString *value = action.data.action.value; // Message action value    NSNumber *messageTimetoken = action.data.action.messageTimetoken; // Timetoken of the original message    NSNumber *actionTimetoken = action.data.action.actionTimetoken; // Timetoken of the message action    NSString *uuid = action.data.action.uuid; // UUID of user which added / removed message action}- (void)client:(PubNub *)pubnub didReceivePresenceEvent:(PNPresenceEventResult *)event {    NSString *channel = message.data.channel; // Channel on which presence changes    NSString *subscription = message.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed    NSString *presenceEvent = event.data.presenceEvent; // Can be: join, leave, state-change, timeout or interval    NSNumber *occupancy = event.data.presence.occupancy; // Number of users subscribed to the channel (not available for state-change event)    NSNumber *timetoken = event.data.presence.timetoken; // Presence change timetoken    NSString *uuid = event.data.presence.uuid; // UUID of user for which presence change happened    // Only for 'state-change' event    NSDictionary *state = event.data.presence.state; // User state (only for state-change event)    // Only for 'interval' event    NSArray<NSString *> *join = event.data.presence.join; // UUID of users which recently joined channel    NSArray<NSString *> *leave = event.data.presence.leave; // UUID of users which recently leaved channel    NSArray<NSString *> *timeout = event.data.presence.timeout; // UUID of users which recently timed out on channel}- (void)client:(PubNub *)pubnub didReceiveObjectEvent:(PNObjectEventResult *)event {    NSString *channel = event.data.channel; // Channel to which the event belongs    NSString *subscription = event.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed    NSString *event = event.data.event; // Can be: set or delete    NSString *type = event.data.type; // Entity type: channel, uuid or membership    NSNumber *timestamp = event.data.timestamp; // Event timestamp    PNChannelMetadata *channelMetadata = event.data.channelMetadata; // Updated channel metadata (only for channel entity type)    PNUUIDMetadata *uuidMetadata = event.data.uuidMetadata; // Updated channel metadata (only for uuid entity type)    PNMembership *membership = event.data.membership; // Updated channel metadata (only for membership entity type)}- (void)client:(PubNub *)pubnub didReceiveFileEvent:(PNFileEventResult *)event {    NSString *channel = event.data.channel; // Channel to which file has been uploaded    NSString *subscription = event.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed    id message = event.data.message; // Message added for uploaded file    NSString *publisher = event.data.publisher; // UUID of file uploader    NSURL *fileDownloadURL = event.data.file.downloadURL; // URL which can be used to download file    NSString *fileIdentifier = event.data.file.identifier; // Unique file identifier    NSString *fileName = event.data.file.name; // Name with which file has been stored remotely}- (void)client:(PubNub *)pubnub didReceiveStatus:(PNStatus *)status {    PNStatusCategory category = status.category; // One of PNStatusCategory fields to identify status of operation processing    PNOperationType operation = status.operation; // One of PNOperationType fields to identify for which operation status received    BOOL isError = status.isError; // Whether any kind of error happened.    NSInteger statusCode = status.statusCode; // Related request processing status code    BOOL isTLSEnabled = status.isTLSEnabled; // Whether secured connection enabled    NSString *uuid = status.uuid; // UUID which configured for passed client    NSString *authKey = status.authKey; // Auth key configured for passed client    NSString *origin = status.origin; // Origin against which request has been sent    NSURLRequest *clientRequest = status.clientRequest; // Request which has been used to send last request (may be nil)    BOOL willAutomaticallyRetry = status.willAutomaticallyRetry; // Whether client will try to perform automatic retry    // Following is available when operation == PNSubscribeOperation, because status is PNSubscribeStatus instance in this case    PNSubscribeStatus *subscribeStatus = (PNSubscribeStatus *)status;    NSNumber *currentTimetoken = subscribeStatus.currentTimetoken; // Timetoken which has been used for current subscribe request    NSNumber *lastTimeToken = subscribeStatus.lastTimeToken; // Timetoken which has been used for previous subscribe request    NSArray<NSString *> *subscribedChannels = subscribeStatus.subscribedChannels; // List of channels on which client currently subscribed    NSArray<NSString *> *subscribedChannelGroups = subscribeStatus.subscribedChannelGroups; // List of channel groups on which client currently subscribed    NSString *channel = subscribeStatus.data.channel; // Name of channel for which status has been received    NSString *subscription = subscribeStatus.data.subscription; // Wild-card channel or channel on which PubNub client actually subscribed    NSNumber *timetoken = subscribeStatus.data.timetoken; // Timetoken at which event arrived    NSDictionary *userMetadata = subscribeStatus.data.userMetadata; // Metadata / envelope which has been passed along with event    // Following is available when isError == YES, because status is PNErrorStatus instance in this case    PNErrorStatus *errorStatus = (PNErrorStatus *)status;    id associatedObject = errorStatus.associatedObject; // Data which may contain related information (not decrypted message for example)    NSArray<NSString *> *erroredChannels = errorStatus.errorData.channels; // List of channels for which error reported (mostly because of PAM)    NSArray<NSString *> *erroredChannelGroups = errorStatus.errorData.channelGroups; // List of channel groups for which error reported (mostly because of PAM)    NSString *errorInformation = errorStatus.errorData.information; // Stringified information about error    id errorData = errorStatus.errorData.data; // Additional error information from PubNub service}show all 102 lineshide 87 linesCopy