pubnub.SubscribeCallback += SubscribeCallbackHandler;

//Handler
void SubscribeCallbackHandler(object sender, EventArgs e) {
	SubscribeEventEventArgs mea = e as SubscribeEventEventArgs;

	if (mea.Status != null) {
		switch (mea.Status.Category) {
			case PNStatusCategory.PNUnexpectedDisconnectCategory:
			case PNStatusCategory.PNTimeoutCategory:
				pubnub.Publish()
					.Channel("my_channel")
					.Message("Hello from the PubNub Unity SDK")
					.Async((result, status) => {
						if(!status.Error){
							Debug.Log(string.Format("DateTime {0}, In Publish Example, Timetoken: {1}", DateTime.UtcNow , result.Timetoken));
						} else {
							Debug.Log(status.Error);
							Debug.Log(status.ErrorData.Info);
						}
					});
			break;
		}
	}
	if (mea.MessageResult != null) {
		Debug.Log("Channel" + mea.MessageResult.Channel);
		Debug.Log("Payload" + mea.MessageResult.Payload);
		Debug.Log("Publisher Id: " + mea.MessageResult.IssuingClientId);
	}
	if (mea.PresenceEventResult != null) {
		Debug.Log("SubscribeCallback in presence" + mea.PresenceEventResult.Channel + mea.PresenceEventResult.Occupancy + mea.PresenceEventResult.Event);
	}
	if (mea.SignalEventResult != null) {					
		Debug.Log ("SubscribeCallback in SignalEventResult" + mea.SignalEventResult.Channel + mea.SignalEventResult.Payload);
	}
	if (mea.UserEventResult != null) {					
		Debug.Log(mea.UserEventResult.Name);
		Debug.Log(mea.UserEventResult.Email);
		Debug.Log(mea.UserEventResult.ExternalID);
		Debug.Log(mea.UserEventResult.ProfileURL);
		Debug.Log(mea.UserEventResult.UserID);
		Debug.Log(mea.UserEventResult.ETag);
		Debug.Log(mea.UserEventResult.ObjectsEvent);
	}
	if (mea.SpaceEventResult != null) {					
		Debug.Log(mea.SpaceEventResult.Name);
		Debug.Log(mea.SpaceEventResult.Description);
		Debug.Log(mea.SpaceEventResult.SpaceID);
		Debug.Log(mea.SpaceEventResult.ETag);
		Debug.Log(mea.SpaceEventResult.ObjectsEvent);
	} 
	if (mea.MembershipEventResult != null) {					
		Debug.Log(mea.MembershipEventResult.UserID);
		Debug.Log(mea.MembershipEventResult.Description);
		Debug.Log(mea.MembershipEventResult.SpaceID);
		Debug.Log(mea.MembershipEventResult.ObjectsEvent);
	}
	if (mea.MessageActionsEventResult != null) {					
		Debug.Log(mea.MessageActionsEventResult.Channel);
		if(mea.MessageActionsEventResult.Data!=null){
			Debug.Log(mea.MessageActionsEventResult.Data.ActionTimetoken);
			Debug.Log(mea.MessageActionsEventResult.Data.ActionType);
			Debug.Log(mea.MessageActionsEventResult.Data.ActionValue);
			Debug.Log(mea.MessageActionsEventResult.Data.MessageTimetoken);
			Debug.Log(mea.MessageActionsEventResult.Data.UUID);
		}
		Debug.Log(mea.MessageActionsEventResult.MessageActionsEvent);
		Debug.Log(mea.MessageActionsEventResult.Subscription);
	}
}