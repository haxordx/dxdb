let BackendUrl = "http://127.0.0.1:4242/"

class CheckoutViewController: UIViewController {

    // ...

    func displayAlert(title: String, message: String, restartDemo: Bool = false) {
        // ...omitted for brevity
    }

    func pay(withPaymentMethod paymentMethodId: String? = nil, withPaymentIntent paymentIntentId: String? = nil) {
        // Create a PaymentIntent on the server
        let url = URL(string: BackendUrl + "pay")!
        var json: [String: Any] = [:]
        if let paymentMethodId = paymentMethodId {            json = [
                "useStripeSdk": true,
                "paymentMethodId": paymentMethodId,
                "currency": "usd",
                "items": [
                    "id": "photo_subscription"
                ]
            ]
        }
        else if let paymentIntentId = paymentIntentId {
            json = [
                "paymentIntentId": paymentIntentId,
            ]
        }
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: json)
        let task = URLSession.shared.dataTask(with: request, completionHandler: { [weak self] (data, response, requestError) in
            guard let response = response as? HTTPURLResponse,
                response.statusCode == 200,
                let data = data,
                let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String : Any] else {
                    self?.displayAlert(title: "Payment failed", message: requestError?.localizedDescription ?? "")
                    return
            }
            let payError = json["error"] as? String
            let clientSecret = json["clientSecret"] as? String
            let requiresAction = json["requiresAction"] as? Bool

            // Payment failed
            if let payError = payError {
                self?.displayAlert(title: "Payment failed", message: payError)
            }
            // Payment succeeded, no additional action required
            else if clientSecret != nil && (requiresAction == nil || requiresAction == false) {
                self?.displayAlert(title: "Payment succeeded", message: clientSecret ?? "", restartDemo: true)
            }
            // Payment requires additional action
            else if clientSecret != nil && requiresAction == true && self != nil {
                // ...continued in the next step
            }
        })
        task.resume()
    }
}let BackendUrl = "http://127.0.0.1:4242/"

class CheckoutViewController: UIViewController {

    // ...

    func displayAlert(title: String, message: String, restartDemo: Bool = false) {
        // ...omitted for brevity
    }

    func pay(withPaymentMethod paymentMethodId: String? = nil, withPaymentIntent paymentIntentId: String? = nil) {
        // Create a PaymentIntent on the server
        let url = URL(string: BackendUrl + "pay")!
        var json: [String: Any] = [:]
        if let paymentMethodId = paymentMethodId {