// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
StripeConfiguration.ApiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";
using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

using Stripe;
using Stripe.Checkout;

namespace Controllers
{
  public class ConnectController : Controller
  {
    private readonly ILogger<ConnectController> logger;

    public ConnectController(
      ILogger<ConnectController> logger,
    ) {
      this.logger = logger;
    }

    [HttpPost("webhook")]
    public async Task<IActionResult> ProcessWebhookEvent()
    {
      var json = await new StreamReader(HttpContext.Request.Body).ReadToEndAsync();

      // Uncomment and replace with a real secret. You can find your endpoint's
      // secret in your webhook settings.
      // const string webhookSecret = "whsec_...";

      // Verify webhook signature and extract the event.
      try
      {
        var stripeEvent = EventUtility.ConstructEvent(json, Request.Headers["Stripe-Signature"], webhookSecret);

        if (stripeEvent.Type == Events.CheckoutSessionCompleted) {
          var session = stripeEvent.Data.Object as Session;
          HandleCheckoutSession(session);
        }

        return Ok();
      }
      catch (Exception e)
      {
        logger.LogInformation(e.ToString());
        return BadRequest();
      }
    }

    private void HandleAuthorizationRequest(Authorization auth) {
      // Authorize the transaction.
      var service = new AuthorizationService();
      var authorization = service.Approve(auth.getId());
    }
  }
}// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
StripeConfiguration.ApiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";
using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;

using Stripe;
using Stripe.Checkout;

namespace Controllers
{
  public class ConnectController : Controller
  {
    private readonly ILogger<ConnectController> logger;

    public ConnectController(
      ILogger<ConnectController> logger,
    ) {
      this.logger = logger;
    }

    [HttpPost("webhook")]
    public async Task<IActionResult> ProcessWebhookEvent()
    {
      var json = await new StreamReader(HttpContext.Request.Body).ReadToEndAsync();

      // Uncomment and replace with a real secret. You can find your endpoint's
      // secret in your webhook settings.
      // const string webhookSecret = "whsec_...";

      // Verify webhook signature and extract the event.
      try
      {
        var stripeEvent = EventUtility.ConstructEvent(json, Request.Headers["Stripe-Signature"], webhookSecret);

        if (stripeEvent.Type == Events.CheckoutSessionCompleted) {
          var session = stripeEvent.Data.Object as Session;
          HandleCheckoutSession(session);
        }

        return Ok();
      }
      catch (Exception e)
      {
        logger.LogInformation(e.ToString());
        return BadRequest();
      }
    }

    private void HandleAuthorizationRequest(Authorization auth) {
      // Authorize the transaction.
      var service = new AuthorizationService();
      var authorization = service.Approve(auth.getId());
    }
  }
}