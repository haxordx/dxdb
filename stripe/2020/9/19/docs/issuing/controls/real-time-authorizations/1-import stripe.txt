import stripe
import json

# Using Flask.
from flask import (
  Flask,
  render_template,
  request,
)

app = Flask(__name__, static_folder=".",
static_url_path="", template_folder=".")

# Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.api_key = 'sk_test_4eC39HqLyjWDarjtT1zdp7dc'

# Uncomment and replace with a real secret. You can find your endpoint's
# secret in your webhook settings.
# webhook_secret = 'whsec_...'

@app.route("/webhook", methods=["POST"])
def webhook_received():
  request_data = json.loads(request.data)
  signature = request.headers.get("stripe-signature")

  # Verify webhook signature and extract the event.
  try:
    event = stripe.Webhook.construct_event(
      payload=request.data, sig_header=signature, secret=webhook_secret
    )
  except ValueError as e:
    # Invalid payload.
    return HttpResponse(status=400)
  except stripe.error.SignatureVerificationError as e:
    # Invalid signature.
    return HttpResponse(status=400)

  if event["type"] == "issuing_authorization.request":
    auth = event["data"]["object"]
    handle_authorization(auth)

  return json.dumps({"success": True}), 200

def handle_authorization(auth):
  # Authorize the transaction.
  authorization = stripe.issuing.Authorization.approve(auth['id'])

if __name__ == "__main__":
  app.run(port=4242)import stripe
import json

# Using Flask.
from flask import (
  Flask,
  render_template,
  request,
)

app = Flask(__name__, static_folder=".",
static_url_path="", template_folder=".")

# Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.api_key = 'sk_test_4eC39HqLyjWDarjtT1zdp7dc'

# Uncomment and replace with a real secret. You can find your endpoint's
# secret in your webhook settings.
# webhook_secret = 'whsec_...'

@app.route("/webhook", methods=["POST"])
def webhook_received():
  request_data = json.loads(request.data)
  signature = request.headers.get("stripe-signature")

  # Verify webhook signature and extract the event.
  try:
    event = stripe.Webhook.construct_event(
      payload=request.data, sig_header=signature, secret=webhook_secret
    )
  except ValueError as e:
    # Invalid payload.
    return HttpResponse(status=400)
  except stripe.error.SignatureVerificationError as e:
    # Invalid signature.
    return HttpResponse(status=400)

  if event["type"] == "issuing_authorization.request":
    auth = event["data"]["object"]
    handle_authorization(auth)

  return json.dumps({"success": True}), 200

def handle_authorization(auth):
  # Authorize the transaction.
  authorization = stripe.issuing.Authorization.approve(auth['id'])

if __name__ == "__main__":
  app.run(port=4242)