<?php
// Using Slim.
use Slim\Http\Request;
use Slim\Http\Response;
use Stripe\Stripe;

require_once('vendor/autoload.php');

$app = new \Slim\App;

// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
\Stripe\Stripe::setApiKey('sk_test_4eC39HqLyjWDarjtT1zdp7dc');

// Uncomment and replace with a real secret. You can find your endpoint's
// secret in your webhook settings.
// $webhook_secret = 'whsec_...';

$app->post('/webhook', function ($request, $response, $next) {
  $payload = $request->getBody();
  $sig_header = $request->getHeaderLine('stripe-signature');

  $event = null;

  // Verify webhook signature and extract the event.
  try {
    $event = \Stripe\Webhook::constructEvent(
      $payload, $sig_header, $webhook_secret
    );
  } catch(\UnexpectedValueException $e) {
    // Invalid payload.
    return $response->withStatus(400);
  } catch(\Stripe\Exception\SignatureVerificationException $e) {
    // Invalid signature.
    return $response->withStatus(400);
  }

  if ($event->type == 'issuing_authorization.request') {
    $auth = $event->data->object;
    handleAuthorizationRequest($auth);
  }

  return $response->withStatus(200);
});

function handleAuthorizationRequest($auth) {
  // Authorize the transaction.
  $authorization = \Stripe\Issuing\Authorization::retrieve($auth['id']);
  $authorization->approve();
};

$app->run();<?php
// Using Slim.
use Slim\Http\Request;
use Slim\Http\Response;
use Stripe\Stripe;

require_once('vendor/autoload.php');

$app = new \Slim\App;

// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
\Stripe\Stripe::setApiKey('sk_test_4eC39HqLyjWDarjtT1zdp7dc');

// Uncomment and replace with a real secret. You can find your endpoint's
// secret in your webhook settings.
// $webhook_secret = 'whsec_...';

$app->post('/webhook', function ($request, $response, $next) {
  $payload = $request->getBody();
  $sig_header = $request->getHeaderLine('stripe-signature');

  $event = null;

  // Verify webhook signature and extract the event.
  try {
    $event = \Stripe\Webhook::constructEvent(
      $payload, $sig_header, $webhook_secret
    );
  } catch(\UnexpectedValueException $e) {
    // Invalid payload.
    return $response->withStatus(400);
  } catch(\Stripe\Exception\SignatureVerificationException $e) {
    // Invalid signature.
    return $response->withStatus(400);
  }

  if ($event->type == 'issuing_authorization.request') {
    $auth = $event->data->object;
    handleAuthorizationRequest($auth);
  }

  return $response->withStatus(200);
});

function handleAuthorizationRequest($auth) {
  // Authorize the transaction.
  $authorization = \Stripe\Issuing\Authorization::retrieve($auth['id']);
  $authorization->approve();
};

$app->run();