package main

import (
  "encoding/json"
  "log"
  "fmt"
  "net/http"
  "io/ioutil"

  "github.com/stripe/stripe-go/v71"
  "github.com/stripe/stripe-go/v71/webhook"
  "github.com/stripe/stripe-go/v71/issuing/authorization"

  "os"
)

func main() {
  // Set your secret key. Remember to switch to your live secret key in production!
  // See your keys here: https://dashboard.stripe.com/account/apikeys
  stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

  http.HandleFunc("/webhook", handleWebhook)
  addr := "localhost:4242"

  log.Printf("Listening on %s ...", addr)
  log.Fatal(http.ListenAndServe(addr, nil))
}

func handleWebhook(w http.ResponseWriter, req *http.Request) {
  const MaxBodyBytes = int64(65536)
  req.Body = http.MaxBytesReader(w, req.Body, MaxBodyBytes)
  body, err := ioutil.ReadAll(req.Body)
  if err != nil {
    fmt.Fprintf(os.Stderr, "Error reading request body: %v\n", err)
    w.WriteHeader(http.StatusServiceUnavailable)
    return
  }

  // Uncomment and replace with a real secret. You can find your endpoint's
  // secret in your webhook settings.
  // webhookSecret := "whsec_..."

  // Verify webhook signature and extract the event.
  event, err := webhook.ConstructEvent(body, req.Header.Get("Stripe-Signature"), webhookSecret)

  if err != nil {
    fmt.Fprintf(os.Stderr, "Error verifying webhook signature: %v\n", err)
    w.WriteHeader(http.StatusBadRequest) // Return a 400 error on a bad signature.
    return
  }

  if event.Type == "issuing_authorization.request" {
    var auth stripe.IssuingAuthorization
    err := json.Unmarshal(event.Data.Raw, &auth)
    if err != nil {
      fmt.Fprintf(os.Stderr, "Error parsing webhook JSON: %v\n", err)
      w.WriteHeader(http.StatusBadRequest)
      return
    }

    handleAuthorizationRequest(auth)
  }

  w.WriteHeader(http.StatusOK)
}

func handleAuthorizationRequest(auth stripe.IssuingAuthorization) {
  // Authorize the transaction.
  _, _ = authorization.Approve(auth.ID, &stripe.IssuingAuthorizationParams{})
}package main

import (
  "encoding/json"
  "log"
  "fmt"
  "net/http"
  "io/ioutil"

  "github.com/stripe/stripe-go/v71"
  "github.com/stripe/stripe-go/v71/webhook"
  "github.com/stripe/stripe-go/v71/issuing/authorization"

  "os"
)

func main() {
  // Set your secret key. Remember to switch to your live secret key in production!
  // See your keys here: https://dashboard.stripe.com/account/apikeys
  stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

  http.HandleFunc("/webhook", handleWebhook)
  addr := "localhost:4242"

  log.Printf("Listening on %s ...", addr)
  log.Fatal(http.ListenAndServe(addr, nil))
}

func handleWebhook(w http.ResponseWriter, req *http.Request) {
  const MaxBodyBytes = int64(65536)
  req.Body = http.MaxBytesReader(w, req.Body, MaxBodyBytes)
  body, err := ioutil.ReadAll(req.Body)
  if err != nil {
    fmt.Fprintf(os.Stderr, "Error reading request body: %v\n", err)
    w.WriteHeader(http.StatusServiceUnavailable)
    return
  }

  // Uncomment and replace with a real secret. You can find your endpoint's
  // secret in your webhook settings.
  // webhookSecret := "whsec_..."

  // Verify webhook signature and extract the event.
  event, err := webhook.ConstructEvent(body, req.Header.Get("Stripe-Signature"), webhookSecret)

  if err != nil {
    fmt.Fprintf(os.Stderr, "Error verifying webhook signature: %v\n", err)
    w.WriteHeader(http.StatusBadRequest) // Return a 400 error on a bad signature.
    return
  }

  if event.Type == "issuing_authorization.request" {
    var auth stripe.IssuingAuthorization
    err := json.Unmarshal(event.Data.Raw, &auth)
    if err != nil {
      fmt.Fprintf(os.Stderr, "Error parsing webhook JSON: %v\n", err)
      w.WriteHeader(http.StatusBadRequest)
      return
    }

    handleAuthorizationRequest(auth)
  }

  w.WriteHeader(http.StatusOK)
}

func handleAuthorizationRequest(auth stripe.IssuingAuthorization) {
  // Authorize the transaction.
  _, _ = authorization.Approve(auth.ID, &stripe.IssuingAuthorizationParams{})
}