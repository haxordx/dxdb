func handleRetrieveUpcomingInvoice(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }
  var req struct {
    SubscriptionID string `json:"subscriptionId"`
    CustomerID     string `json:"customerId"`
    NewPriceID     string `json:"newPriceId"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  s, err := sub.Get(req.SubscriptionID, nil)
  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("sub.Get: %v", err)
    return
  }
  params := &stripe.InvoiceParams{
    Customer:     stripe.String(req.CustomerID),
    Subscription: stripe.String(req.SubscriptionID),
    SubscriptionItems: []*stripe.SubscriptionItemsParams{{
      ID:      stripe.String(s.Items.Data[0].ID),
      Deleted: stripe.Bool(true),
      ClearUsage: stripe.Bool(true),
    }, {
      Price:   stripe.String(os.Getenv(req.NewPriceID)),
      Deleted: stripe.Bool(false),
    }},
  }
  in, err := invoice.GetNext(params)

  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("invoice.GetNext: %v", err)
    return
  }

  writeJSON(w, in)
}
func handleRetrieveUpcomingInvoice(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }
  var req struct {
    SubscriptionID string `json:"subscriptionId"`
    CustomerID     string `json:"customerId"`
    NewPriceID     string `json:"newPriceId"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  s, err := sub.Get(req.SubscriptionID, nil)
  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("sub.Get: %v", err)
    return
  }
  params := &stripe.InvoiceParams{
    Customer:     stripe.String(req.CustomerID),
    Subscription: stripe.String(req.SubscriptionID),
    SubscriptionItems: []*stripe.SubscriptionItemsParams{{
      ID:      stripe.String(s.Items.Data[0].ID),
      Deleted: stripe.Bool(true),
      ClearUsage: stripe.Bool(true),
    }, {
      Price:   stripe.String(os.Getenv(req.NewPriceID)),
      Deleted: stripe.Bool(false),
    }},
  }
  in, err := invoice.GetNext(params)

  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("invoice.GetNext: %v", err)
    return
  }

  writeJSON(w, in)
}
