// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

// This code can be run on an interval (e.g., every 24 hours) for each active
// metered subscription.

// You need to write some of your own business logic before creating the
// usage record. Pull a record of a customer from your database
// and extract the customer's Stripe Subscription Item ID and
// usage for the day. If you aren't storing subscription item IDs,
// you can retrieve the subscription and check for subscription items
// https://stripe.com/docs/api/subscriptions/object#subscription_object-items.

String subscriptionItemID = "{{SUBSCRIPTION_ITEM_ID}}";

// The usage number you've been keeping track of in your database for the last 24 hours.
long usageQuantity = 100;

long timestamp = Instant.now().getEpochSecond();

// The idempotency key allows you to retry this usage record call if it fails.
String idempotencyKey = UUID.randomUUID().toString();

try {
  UsageRecordCreateOnSubscriptionItemParams params =
  UsageRecordCreateOnSubscriptionItemParams.builder()
    .setQuantity(usageQuantity)
    .setTimestamp(timestamp)
    .setAction(UsageRecordCreateOnSubscriptionItemParams.Action.SET)
    .build();

  RequestOptions options = RequestOptions
    .builder()
    .setIdempotencyKey(idempotencyKey)
    .build();

  UsageRecord.createOnSubscriptionItem(subscriptionItemID, params, options);
} catch (StripeException e) {
  System.out.println("Usage report failed for item ID " + subscriptionItemID
    + " with idempotency key " + idempotencyKey + ": " + e.getMessage());
}
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

// This code can be run on an interval (e.g., every 24 hours) for each active
// metered subscription.

// You need to write some of your own business logic before creating the
// usage record. Pull a record of a customer from your database
// and extract the customer's Stripe Subscription Item ID and
// usage for the day. If you aren't storing subscription item IDs,
// you can retrieve the subscription and check for subscription items
// https://stripe.com/docs/api/subscriptions/object#subscription_object-items.

String subscriptionItemID = "{{SUBSCRIPTION_ITEM_ID}}";

// The usage number you've been keeping track of in your database for the last 24 hours.
long usageQuantity = 100;

long timestamp = Instant.now().getEpochSecond();

// The idempotency key allows you to retry this usage record call if it fails.
String idempotencyKey = UUID.randomUUID().toString();

try {
  UsageRecordCreateOnSubscriptionItemParams params =
  UsageRecordCreateOnSubscriptionItemParams.builder()
    .setQuantity(usageQuantity)
    .setTimestamp(timestamp)
    .setAction(UsageRecordCreateOnSubscriptionItemParams.Action.SET)
    .build();

  RequestOptions options = RequestOptions
    .builder()
    .setIdempotencyKey(idempotencyKey)
    .build();

  UsageRecord.createOnSubscriptionItem(subscriptionItemID, params, options);
} catch (StripeException e) {
  System.out.println("Usage report failed for item ID " + subscriptionItemID
    + " with idempotency key " + idempotencyKey + ": " + e.getMessage());
}
