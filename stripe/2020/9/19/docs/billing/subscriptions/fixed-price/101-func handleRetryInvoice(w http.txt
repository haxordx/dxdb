func handleRetryInvoice(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }

  var req struct {
    CustomerID      string `json:"customerId"`
    PaymentMethodID string `json:"paymentMethodId"`
    InvoiceID       string `json:"invoiceId"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  // Attach PaymentMethod
  params := &stripe.PaymentMethodAttachParams{
    Customer: stripe.String(req.CustomerID),
  }
  pm, err := paymentmethod.Attach(
    req.PaymentMethodID,
    params,
  )
  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("paymentmethod.Attach: %v %s", err, pm.ID)
    return
  }

  // Update invoice settings default
  customerParams := &stripe.CustomerParams{
    InvoiceSettings: &stripe.CustomerInvoiceSettingsParams{
      DefaultPaymentMethod: stripe.String(pm.ID),
    },
  }
  c, err := customer.Update(
    req.CustomerID,
    customerParams,
  )

  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("customer.Update: %v %s", err, c.ID)
    return
  }

  // Retrieve Invoice
  invoiceParams := &stripe.InvoiceParams{}
  invoiceParams.AddExpand("payment_intent")
  in, err := invoice.Get(
    req.InvoiceID,
    invoiceParams,
  )

  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("invoice.Get: %v", err)
    return
  }

  writeJSON(w, in)
}
func handleRetryInvoice(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }

  var req struct {
    CustomerID      string `json:"customerId"`
    PaymentMethodID string `json:"paymentMethodId"`
    InvoiceID       string `json:"invoiceId"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  // Attach PaymentMethod
  params := &stripe.PaymentMethodAttachParams{
    Customer: stripe.String(req.CustomerID),
  }
  pm, err := paymentmethod.Attach(
    req.PaymentMethodID,
    params,
  )
  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("paymentmethod.Attach: %v %s", err, pm.ID)
    return
  }

  // Update invoice settings default
  customerParams := &stripe.CustomerParams{
    InvoiceSettings: &stripe.CustomerInvoiceSettingsParams{
      DefaultPaymentMethod: stripe.String(pm.ID),
    },
  }
  c, err := customer.Update(
    req.CustomerID,
    customerParams,
  )

  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("customer.Update: %v %s", err, c.ID)
    return
  }

  // Retrieve Invoice
  invoiceParams := &stripe.InvoiceParams{}
  invoiceParams.AddExpand("payment_intent")
  in, err := invoice.Get(
    req.InvoiceID,
    invoiceParams,
  )

  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("invoice.Get: %v", err)
    return
  }

  writeJSON(w, in)
}
