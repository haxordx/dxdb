// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

post(
  "/create-customer",
  (request, response) -> {
    response.type("application/json");

    CreateCustomerBody postBody = gson.fromJson(
      request.body(),
      CreateCustomerBody.class
    );

    CustomerCreateParams customerParams = CustomerCreateParams
      .builder()
      .setEmail(postBody.getEmail())
      .build();
    // Create a new customer object
    Customer customer = Customer.create(customerParams);

    Map<String, Object> responseData = new HashMap<>();
    responseData.put("customer", customer);

    //we use StripeObject.PRETTY_PRINT_GSON.toJson() so that we get the JSON our client is expecting on the polymorphic
    //parameters that can either be object ids or the object themselves. If we tried to generate the JSON without call this,
    //for example, by calling gson.toJson(responseData) we will see something like "customer":{"id":"cus_XXX"} instead of
    //"customer":"cus_XXX".
    //If you only need to return 1 object, you can use the built in serializers, i.e. Subscription.retrieve("sub_XXX").toJson()
    return StripeObject.PRETTY_PRINT_GSON.toJson(responseData);
  }
);
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

post(
  "/create-customer",
  (request, response) -> {
    response.type("application/json");

    CreateCustomerBody postBody = gson.fromJson(
      request.body(),
      CreateCustomerBody.class
    );

    CustomerCreateParams customerParams = CustomerCreateParams
      .builder()
      .setEmail(postBody.getEmail())
      .build();
    // Create a new customer object
    Customer customer = Customer.create(customerParams);

    Map<String, Object> responseData = new HashMap<>();
    responseData.put("customer", customer);

    //we use StripeObject.PRETTY_PRINT_GSON.toJson() so that we get the JSON our client is expecting on the polymorphic
    //parameters that can either be object ids or the object themselves. If we tried to generate the JSON without call this,
    //for example, by calling gson.toJson(responseData) we will see something like "customer":{"id":"cus_XXX"} instead of
    //"customer":"cus_XXX".
    //If you only need to return 1 object, you can use the built in serializers, i.e. Subscription.retrieve("sub_XXX").toJson()
    return StripeObject.PRETTY_PRINT_GSON.toJson(responseData);
  }
);
