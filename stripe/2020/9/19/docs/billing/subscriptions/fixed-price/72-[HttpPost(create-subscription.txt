[HttpPost("create-subscription")]
public ActionResult<Subscription> CreateSubscription([FromBody] CreateSubscriptionRequest req)
{
    // Attach payment method
    var options = new PaymentMethodAttachOptions
    {
        Customer = req.Customer,
    };
    var service = new PaymentMethodService();
    var paymentMethod = service.Attach(req.PaymentMethod, options);

    // Update customer's default invoice payment method
    var customerOptions = new CustomerUpdateOptions
    {
        InvoiceSettings = new CustomerInvoiceSettingsOptions
        {
            DefaultPaymentMethod = paymentMethod.Id,
        },
    };
    var customerService = new CustomerService();
    customerService.Update(req.Customer, customerOptions);

    // Create subscription
    var subscriptionOptions = new SubscriptionCreateOptions
    {
        Customer = req.Customer,
        Items = new List<SubscriptionItemOptions>
        {
            new SubscriptionItemOptions
            {
                Price = Environment.GetEnvironmentVariable(req.Price),
            },
        },
    };
    subscriptionOptions.AddExpand("latest_invoice.payment_intent");
    var subscriptionService = new SubscriptionService();
    try
    {
        Subscription subscription = subscriptionService.Create(subscriptionOptions);
        return subscription;
    }
    catch (StripeException e)
    {
        Console.WriteLine($"Failed to create subscription.{e}");
        return BadRequest();
    }
}
[HttpPost("create-subscription")]
public ActionResult<Subscription> CreateSubscription([FromBody] CreateSubscriptionRequest req)
{
    // Attach payment method
    var options = new PaymentMethodAttachOptions
    {
        Customer = req.Customer,
    };
    var service = new PaymentMethodService();
    var paymentMethod = service.Attach(req.PaymentMethod, options);

    // Update customer's default invoice payment method
    var customerOptions = new CustomerUpdateOptions
    {
        InvoiceSettings = new CustomerInvoiceSettingsOptions
        {
            DefaultPaymentMethod = paymentMethod.Id,
        },
    };
    var customerService = new CustomerService();
    customerService.Update(req.Customer, customerOptions);

    // Create subscription
    var subscriptionOptions = new SubscriptionCreateOptions
    {
        Customer = req.Customer,
        Items = new List<SubscriptionItemOptions>
        {
            new SubscriptionItemOptions
            {
                Price = Environment.GetEnvironmentVariable(req.Price),
            },
        },
    };
    subscriptionOptions.AddExpand("latest_invoice.payment_intent");
    var subscriptionService = new SubscriptionService();
    try
    {
        Subscription subscription = subscriptionService.Create(subscriptionOptions);
        return subscription;
    }
    catch (StripeException e)
    {
        Console.WriteLine($"Failed to create subscription.{e}");
        return BadRequest();
    }
}
