# Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.api_key = 'sk_test_4eC39HqLyjWDarjtT1zdp7dc'

post '/update-subscription' do
  content_type 'application/json'
  data = JSON.parse request.body.read

  subscription = Stripe::Subscription.retrieve(data['subscriptionId'])
  current_price = subscription.items.data[0].price.id
  new_price = ENV[data['newPriceId']]
  quantity = data['quantity']

  updated_subscription = subscription

  if current_price == new_price
    updated_subscription =
      Stripe::Subscription.update(
        data['subscriptionId'],
        items: [{ id: subscription.items.data[0].id, quantity: quantity }],
        expand: %w[plan.product]
      )
  else
    updated_subscription =
      Stripe::Subscription.update(
        data['subscriptionId'],
        items: [
          { id: subscription.items.data[0].id, deleted: true },
          { price: new_price, quantity: data['quantity'] }
        ],
        expand: %w[plan.product]
      )
  end

  # invoice and charge the customer immediately for the payment representing any balance that the customer accrued
  # as a result of the change.  For example, if the user added seats for this month, this would charge the proration amount for those
  # extra seats for the remaining part of the month.

  invoice =
    Stripe::Invoice.pay(
      Stripe::Invoice.create(
        {
          customer: subscription.customer,
          subscription: subscription.id,
          description:
            'Change to #{quantity} seat(s) on the #{updated_subscription.plan.product.name} plan'
        }
      ).id
    )

  { subscription: updated_subscription }.to_json
end
# Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.api_key = 'sk_test_4eC39HqLyjWDarjtT1zdp7dc'

post '/update-subscription' do
  content_type 'application/json'
  data = JSON.parse request.body.read

  subscription = Stripe::Subscription.retrieve(data['subscriptionId'])
  current_price = subscription.items.data[0].price.id
  new_price = ENV[data['newPriceId']]
  quantity = data['quantity']

  updated_subscription = subscription

  if current_price == new_price
    updated_subscription =
      Stripe::Subscription.update(
        data['subscriptionId'],
        items: [{ id: subscription.items.data[0].id, quantity: quantity }],
        expand: %w[plan.product]
      )
  else
    updated_subscription =
      Stripe::Subscription.update(
        data['subscriptionId'],
        items: [
          { id: subscription.items.data[0].id, deleted: true },
          { price: new_price, quantity: data['quantity'] }
        ],
        expand: %w[plan.product]
      )
  end

  # invoice and charge the customer immediately for the payment representing any balance that the customer accrued
  # as a result of the change.  For example, if the user added seats for this month, this would charge the proration amount for those
  # extra seats for the remaining part of the month.

  invoice =
    Stripe::Invoice.pay(
      Stripe::Invoice.create(
        {
          customer: subscription.customer,
          subscription: subscription.id,
          description:
            'Change to #{quantity} seat(s) on the #{updated_subscription.plan.product.name} plan'
        }
      ).id
    )

  { subscription: updated_subscription }.to_json
end
