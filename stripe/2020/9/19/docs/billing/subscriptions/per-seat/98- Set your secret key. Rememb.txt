// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
\Stripe\Stripe::setApiKey('sk_test_4eC39HqLyjWDarjtT1zdp7dc');

$app->post('/retrieve-upcoming-invoice', function (Request $request, Response $response, array $args) {
  $body = json_decode($request->getBody());
  $stripe = $this->stripe;

  $new_price = getenv(strtoupper($body->newPriceId));
  $params = [];
  $params['customer'] = $body->customerId;

  $subscriptionId = $body->subscriptionId;


  if ($subscriptionId != null)
  {
    $subscription = $stripe->subscriptions->retrieve($subscriptionId);
    $params['subscription'] = $subscriptionId;

    #compare the current price to the new price, and only create a new subscription if they are different
    #otherwise, just add seats to the existing subscription
    # subscription.plan.id would also work

    $current_price = $subscription->items->data[0]->price->id;

    if ($current_price == $new_price)
    {
      $params['subscription_items'] = [
        [
          'id' => $subscription->items->data[0]->id,
          'quantity' => $body->quantity
        ]
      ];
    }
    else    {
      $params['subscription_items'] = [
        [
          'id' => $subscription->items->data[0]->id,
          'deleted' => true
        ],
        [
          'price' => $new_price,
          'quantity' => $body->quantity
        ]
      ];
    }
  }
  else
  {
    $params['subscription_items'] = [
      [
        'price' => $new_price,
        'quantity' => $body->quantity
      ]
    ];
  }

  $invoice = $stripe->invoices->upcoming($params);

  #in the case where we are returning the upcoming invoice for a subscription change, calculate what the
  #invoice totals would be for the invoice we'll charge immediately when they confirm the change, and
  #also return the amount for the next period's invoice.

  $responseParams = [];

  if ($subscription != null) {
    $current_period_end = $subscription->current_period_end;
    $immediate_total = 0;
    $next_invoice_sum = 0;

    foreach ($invoice->lines->data as $invoiceLineItem)
    {
      if ($invoiceLineItem->period->end ==  $current_period_end)
      {
        $immediate_total += $invoiceLineItem->amount;
      }
      else
      {
        $next_invoice_sum += $invoiceLineItem->amount;
      }
    }

    $responseParams = [
      'immediate_total' => $immediate_total,
      'next_invoice_sum' => $next_invoice_sum,
      'invoice' => $invoice
    ];
  }
  else
  {
    $responseParams = [
      'invoice' => $invoice
    ];
  }

  return $response->withJson($responseParams);
});// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
\Stripe\Stripe::setApiKey('sk_test_4eC39HqLyjWDarjtT1zdp7dc');

$app->post('/retrieve-upcoming-invoice', function (Request $request, Response $response, array $args) {
  $body = json_decode($request->getBody());
  $stripe = $this->stripe;

  $new_price = getenv(strtoupper($body->newPriceId));
  $params = [];
  $params['customer'] = $body->customerId;

  $subscriptionId = $body->subscriptionId;


  if ($subscriptionId != null)
  {
    $subscription = $stripe->subscriptions->retrieve($subscriptionId);
    $params['subscription'] = $subscriptionId;

    #compare the current price to the new price, and only create a new subscription if they are different
    #otherwise, just add seats to the existing subscription
    # subscription.plan.id would also work

    $current_price = $subscription->items->data[0]->price->id;

    if ($current_price == $new_price)
    {
      $params['subscription_items'] = [
        [
          'id' => $subscription->items->data[0]->id,
          'quantity' => $body->quantity
        ]
      ];
    }
    else