// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

func handleCreateSubscription(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }

  var req struct {
    PaymentMethodID string `json:"paymentMethodId"`
    CustomerID      string `json:"customerId"`
    PriceID         string `json:"priceId"`
    Quantity        int64  `json:"quantity"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  // Attach PaymentMethod
  params := &stripe.PaymentMethodAttachParams{
    Customer: stripe.String(req.CustomerID),
  }
  pm, err := paymentmethod.Attach(
    req.PaymentMethodID,
    params,
  )

  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("paymentmethod.Attach: %v %s", err, pm.ID)
    return
  }

  // Update invoice settings default
  customerParams := &stripe.CustomerParams{
    InvoiceSettings: &stripe.CustomerInvoiceSettingsParams{
      DefaultPaymentMethod: stripe.String(pm.ID),
    },
  }
  c, err := customer.Update(
    req.CustomerID,
    customerParams,
  )

  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("customer.Update: %v %s", err, c.ID)
    return
  }

  // Create subscription
  subscriptionParams := &stripe.SubscriptionParams{
    Customer: stripe.String(req.CustomerID),
    Items: []*stripe.SubscriptionItemsParams{
      {
        Price: stripe.String("price_HGd7M3DV3IMXkC"),
      },
    },
  }
  subscriptionParams.AddExpand("latest_invoice.payment_intent")
  subscriptionParams.AddExpand("plan.product")
  s, err := sub.New(subscriptionParams)

  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("sub.New: %v", err)
    return
  }

  writeJSON(w, s)
}
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

func handleCreateSubscription(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }

  var req struct {
    PaymentMethodID string `json:"paymentMethodId"`
    CustomerID      string `json:"customerId"`
    PriceID         string `json:"priceId"`
    Quantity        int64  `json:"quantity"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  // Attach PaymentMethod
  params := &stripe.PaymentMethodAttachParams{
    Customer: stripe.String(req.CustomerID),
  }
  pm, err := paymentmethod.Attach(
    req.PaymentMethodID,
    params,
  )

  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("paymentmethod.Attach: %v %s", err, pm.ID)
    return
  }

  // Update invoice settings default
  customerParams := &stripe.CustomerParams{
    InvoiceSettings: &stripe.CustomerInvoiceSettingsParams{
      DefaultPaymentMethod: stripe.String(pm.ID),
    },
  }
  c, err := customer.Update(
    req.CustomerID,
    customerParams,
  )

  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("customer.Update: %v %s", err, c.ID)
    return
  }

  // Create subscription
  subscriptionParams := &stripe.SubscriptionParams{
    Customer: stripe.String(req.CustomerID),
    Items: []*stripe.SubscriptionItemsParams{
      {
        Price: stripe.String("price_HGd7M3DV3IMXkC"),
      },
    },
  }
  subscriptionParams.AddExpand("latest_invoice.payment_intent")
  subscriptionParams.AddExpand("plan.product")
  s, err := sub.New(subscriptionParams)

  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("sub.New: %v", err)
    return
  }

  writeJSON(w, s)
}
