func handleCreateCustomer(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }
  var req struct {
    Email string `json:"email"`
  }
  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }
  params := &stripe.CustomerParams{
    Email: stripe.String(req.Email),
  }
  c, err := customer.New(params)
  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("customer.New: %v", err)
    return
  }
  writeJSON(w, struct {
    Customer *stripe.Customer `json:"customer"`
  }{
    Customer: c,
  })
}
func handleCreateCustomer(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }
  var req struct {
    Email string `json:"email"`
  }
  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }
  params := &stripe.CustomerParams{
    Email: stripe.String(req.Email),
  }
  c, err := customer.New(params)
  if err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("customer.New: %v", err)
    return
  }
  writeJSON(w, struct {
    Customer *stripe.Customer `json:"customer"`
  }{
    Customer: c,
  })
}
