// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

post(
  "/retrieve-subscription-information",
  (request, response) -> {
    SubscriptionPostBody postBody = gson.fromJson(
      request.body(),
      SubscriptionPostBody.class
    );

    SubscriptionRetrieveParams subParams = SubscriptionRetrieveParams
      .builder()
      .addAllExpand(
        Arrays.asList(
          "latest_invoice",
          "customer.invoice_settings.default_payment_method",
          "plan.product"
        )
      )
      .build();

    Subscription subscription = Subscription.retrieve(
      postBody.getSubscriptionId(),
      subParams,
      null
    );

    InvoiceUpcomingParams invoiceParams = InvoiceUpcomingParams
      .builder()
      .setSubscription(subscription.getId())
      .build();

    Invoice upcomingInvoice = Invoice.upcoming(invoiceParams);

    Map<String, Object> responseData = new HashMap<>();
    responseData.put(
      "card",
      subscription
        .getCustomerObject()
        .getInvoiceSettings()
        .getDefaultPaymentMethodObject()
        .getCard()
    );
    responseData.put(
      "product_description",
      subscription.getPlan().getProductObject().getName()
    );
    responseData.put("current_price", subscription.getPlan().getId());
    responseData.put(
      "current_quantity",
      subscription.getItems().getData().get(0).getQuantity()
    );
    responseData.put(
      "latest_invoice",
      subscription.getLatestInvoiceObject()
    );
    responseData.put("upcoming_invoice", upcomingInvoice);

    // we use StripeObject.PRETTY_PRINT_GSON.toJson() so that we get the JSON our
    // client is expecting on the polymorphic
    // parameters that can either be object ids or the object themselves. If we
    // tried to generate the JSON without call this,
    // for example, by calling gson.toJson(responseData) we will see something like
    // "customer":{"id":"cus_XXX"} instead of
    // "customer":"cus_XXX".
    // If you only need to return 1 object, you can use the built in serializers,
    // i.e. Subscription.retrieve("sub_XXX").toJson()
    return StripeObject.PRETTY_PRINT_GSON.toJson(responseData);
  }
);
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

post(
  "/retrieve-subscription-information",
  (request, response) -> {
    SubscriptionPostBody postBody = gson.fromJson(
      request.body(),
      SubscriptionPostBody.class
    );

    SubscriptionRetrieveParams subParams = SubscriptionRetrieveParams
      .builder()
      .addAllExpand(
        Arrays.asList(
          "latest_invoice",
          "customer.invoice_settings.default_payment_method",
          "plan.product"
        )
      )
      .build();

    Subscription subscription = Subscription.retrieve(
      postBody.getSubscriptionId(),
      subParams,
      null
    );

    InvoiceUpcomingParams invoiceParams = InvoiceUpcomingParams
      .builder()
      .setSubscription(subscription.getId())
      .build();

    Invoice upcomingInvoice = Invoice.upcoming(invoiceParams);

    Map<String, Object> responseData = new HashMap<>();
    responseData.put(
      "card",
      subscription
        .getCustomerObject()
        .getInvoiceSettings()
        .getDefaultPaymentMethodObject()
        .getCard()
    );
    responseData.put(
      "product_description",
      subscription.getPlan().getProductObject().getName()
    );
    responseData.put("current_price", subscription.getPlan().getId());
    responseData.put(
      "current_quantity",
      subscription.getItems().getData().get(0).getQuantity()
    );
    responseData.put(
      "latest_invoice",
      subscription.getLatestInvoiceObject()
    );
    responseData.put("upcoming_invoice", upcomingInvoice);

    // we use StripeObject.PRETTY_PRINT_GSON.toJson() so that we get the JSON our
    // client is expecting on the polymorphic
    // parameters that can either be object ids or the object themselves. If we
    // tried to generate the JSON without call this,
    // for example, by calling gson.toJson(responseData) we will see something like
    // "customer":{"id":"cus_XXX"} instead of
    // "customer":"cus_XXX".
    // If you only need to return 1 object, you can use the built in serializers,
    // i.e. Subscription.retrieve("sub_XXX").toJson()
    return StripeObject.PRETTY_PRINT_GSON.toJson(responseData);
  }
);
