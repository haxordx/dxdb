# Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.api_key = 'sk_test_4eC39HqLyjWDarjtT1zdp7dc'

@app.route('/update-subscription', methods=['POST'])
def updateSubscription():
    data = json.loads(request.data)
    try:
        new_price = os.getenv(data['newPriceId'].upper())
        quantity = data['quantity']
        subscriptionId = data['subscriptionId']
        subscription = stripe.Subscription.retrieve(subscriptionId)
        current_price = subscription['items']['data'][0].price.id

        if current_price == new_price:
            updatedSubscription = stripe.Subscription.modify(
                subscriptionId,
                items=[{
                    'id': subscription['items']['data'][0].id,
                    'quantity': quantity,
                }],
                expand=['plan.product']
            )

        else:
            updatedSubscription = stripe.Subscription.modify(
                subscriptionId,
                items=[{
                    'id': subscription['items']['data'][0].id,
                    'deleted': True,
                },
                    {
                    'price': new_price,
                    'quantity': quantity
                }],
                expand=['plan.product']
            )

        invoice = stripe.Invoice.create(
            customer=subscription.customer,
            subscription=subscriptionId,
            description="Change to " + quantity +
            " seat(s) on the " + updatedSubscription.plan.product.name + " plan"
        )

        invoice = stripe.Invoice.pay(invoice.id)

        return jsonify(updatedSubscription)
    except Exception as e:
        return jsonify(error=str(e)), 403
# Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.api_key = 'sk_test_4eC39HqLyjWDarjtT1zdp7dc'

@app.route('/update-subscription', methods=['POST'])
def updateSubscription():
    data = json.loads(request.data)
    try:
        new_price = os.getenv(data['newPriceId'].upper())
        quantity = data['quantity']
        subscriptionId = data['subscriptionId']
        subscription = stripe.Subscription.retrieve(subscriptionId)
        current_price = subscription['items']['data'][0].price.id

        if current_price == new_price:
            updatedSubscription = stripe.Subscription.modify(
                subscriptionId,
                items=[{
                    'id': subscription['items']['data'][0].id,
                    'quantity': quantity,
                }],
                expand=['plan.product']
            )

        else:
            updatedSubscription = stripe.Subscription.modify(
                subscriptionId,
                items=[{
                    'id': subscription['items']['data'][0].id,
                    'deleted': True,
                },
                    {
                    'price': new_price,
                    'quantity': quantity
                }],
                expand=['plan.product']
            )

        invoice = stripe.Invoice.create(
            customer=subscription.customer,
            subscription=subscriptionId,
            description="Change to " + quantity +
            " seat(s) on the " + updatedSubscription.plan.product.name + " plan"
        )

        invoice = stripe.Invoice.pay(invoice.id)

        return jsonify(updatedSubscription)
    except Exception as e:
        return jsonify(error=str(e)), 403
