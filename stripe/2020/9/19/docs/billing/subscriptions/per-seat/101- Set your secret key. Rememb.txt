// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

func handleRetrieveUpcomingInvoice(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }
  var req struct {
    CustomerID     string `json:"customerId"`
    NewPriceID     string `json:"newPriceId"`
    Quantity       int64  `json:"quantity"`
    SubscriptionID string `json:"subscriptionId"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  newPriceID := os.Getenv(req.NewPriceID)

  var items []*stripe.SubscriptionItemsParams
  var s stripe.Subscription

  if req.SubscriptionID != "" {
    s, err := sub.Get(req.SubscriptionID, nil)
    if err != nil {
      writeJSONErrorMessage(w, err.Error(), 422)
      log.Printf("sub.Get: %v", err)
      return
    }
    currentPriceID := s.Items.Data[0].Price.ID

    if currentPriceID == newPriceID {
      items = []*stripe.SubscriptionItemsParams{{
        ID:       stripe.String(s.Items.Data[0].ID),
        Quantity: stripe.Int64(req.Quantity),
      }}
    } else {
      items = []*stripe.SubscriptionItemsParams{{
        ID:      stripe.String(s.Items.Data[0].ID),
        Deleted: stripe.Bool(true),
      }, {
        Price:    stripe.String(newPriceID),
        Quantity: stripe.Int64(req.Quantity),
      }}
    }
  } else {
    items = []*stripe.SubscriptionItemsParams{{
      Price:    stripe.String(newPriceID),
      Quantity: stripe.Int64(req.Quantity),
    }}
  }

  var params *stripe.InvoiceParams
  if req.SubscriptionID != "" {
    params = &stripe.InvoiceParams{
      Customer:          stripe.String(req.CustomerID),
      Subscription:      stripe.String(req.SubscriptionID),
      SubscriptionItems: items,
    }
  } else {
    params = &stripe.InvoiceParams{
      Customer:          stripe.String(req.CustomerID),
      SubscriptionItems: items,
    }
  }

  in, err := invoice.GetNext(params)

  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("invoice.GetNext: %v", err)
    return
  }

  // in the case where we are returning the upcoming invoice for a subscription change, calculate what the
  // invoice totals would be for the invoice we'll charge immediately when they confirm the change, and
  // also return the amount for the next period's invoice.

  if req.SubscriptionID == "" {
    writeJSON(w, struct {
      Invoice *stripe.Invoice `json:"invoice"`
    }{
      Invoice: in,
    })
    return
  }

  var immediateTotal int64
  var nextInvoiceSum int64
  for _, lineItem := range in.Lines.Data {
    if lineItem.Period.End == s.CurrentPeriodEnd {
      immediateTotal += lineItem.Amount
    } else {
      nextInvoiceSum += lineItem.Amount
    }
  }

  writeJSON(w, struct {
    ImmediateTotal int64           `json:"immediate_total"`
    NextInvoiceSum int64           `json:"next_invoice_sum"`
    Invoice        *stripe.Invoice `json:"invoice"`
  }{
    ImmediateTotal: immediateTotal,
    NextInvoiceSum: nextInvoiceSum,
    Invoice:        in,
  })
}
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

func handleRetrieveUpcomingInvoice(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }
  var req struct {
    CustomerID     string `json:"customerId"`
    NewPriceID     string `json:"newPriceId"`
    Quantity       int64  `json:"quantity"`
    SubscriptionID string `json:"subscriptionId"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  newPriceID := os.Getenv(req.NewPriceID)

  var items []*stripe.SubscriptionItemsParams
  var s stripe.Subscription

  if req.SubscriptionID != "" {
    s, err := sub.Get(req.SubscriptionID, nil)
    if err != nil {
      writeJSONErrorMessage(w, err.Error(), 422)
      log.Printf("sub.Get: %v", err)
      return
    }
    currentPriceID := s.Items.Data[0].Price.ID

    if currentPriceID == newPriceID {
      items = []*stripe.SubscriptionItemsParams{{
        ID:       stripe.String(s.Items.Data[0].ID),
        Quantity: stripe.Int64(req.Quantity),
      }}
    } else {
      items = []*stripe.SubscriptionItemsParams{{
        ID:      stripe.String(s.Items.Data[0].ID),
        Deleted: stripe.Bool(true),
      }, {
        Price:    stripe.String(newPriceID),
        Quantity: stripe.Int64(req.Quantity),
      }}
    }
  } else {
    items = []*stripe.SubscriptionItemsParams{{
      Price:    stripe.String(newPriceID),
      Quantity: stripe.Int64(req.Quantity),
    }}
  }

  var params *stripe.InvoiceParams
  if req.SubscriptionID != "" {
    params = &stripe.InvoiceParams{
      Customer:          stripe.String(req.CustomerID),
      Subscription:      stripe.String(req.SubscriptionID),
      SubscriptionItems: items,
    }
  } else {
    params = &stripe.InvoiceParams{
      Customer:          stripe.String(req.CustomerID),
      SubscriptionItems: items,
    }
  }

  in, err := invoice.GetNext(params)

  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("invoice.GetNext: %v", err)
    return
  }

  // in the case where we are returning the upcoming invoice for a subscription change, calculate what the
  // invoice totals would be for the invoice we'll charge immediately when they confirm the change, and
  // also return the amount for the next period's invoice.

  if req.SubscriptionID == "" {
    writeJSON(w, struct {
      Invoice *stripe.Invoice `json:"invoice"`
    }{
      Invoice: in,
    })
    return
  }

  var immediateTotal int64
  var nextInvoiceSum int64
  for _, lineItem := range in.Lines.Data {
    if lineItem.Period.End == s.CurrentPeriodEnd {
      immediateTotal += lineItem.Amount
    } else {
      nextInvoiceSum += lineItem.Amount
    }
  }

  writeJSON(w, struct {
    ImmediateTotal int64           `json:"immediate_total"`
    NextInvoiceSum int64           `json:"next_invoice_sum"`
    Invoice        *stripe.Invoice `json:"invoice"`
  }{
    ImmediateTotal: immediateTotal,
    NextInvoiceSum: nextInvoiceSum,
    Invoice:        in,
  })
}
