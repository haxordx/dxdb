// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
StripeConfiguration.ApiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

[HttpPost("retrieve-subscription-information")]
public ActionResult<RetrieveSubscriptionInformationResponse> RetrieveSubscriptionInformation([FromBody] RetrieveSubscriptionInformationRequest req)
{
    var options = new SubscriptionGetOptions();
    options.AddExpand("latest_invoice");
    options.AddExpand("customer.invoice_settings.default_payment_method");
    options.AddExpand("plan.product");
    var service = new SubscriptionService();
    Subscription subscription;
    try
    {
        subscription = service.Get(req.Subscription, options);
    }
    catch (StripeException e)
    {
        return this.FailWithMessage($"Failed to retrieve subscription with ID ({req.Subscription}): {e}");
    }

    var invoiceOptions = new UpcomingInvoiceOptions
    {
        Subscription = req.Subscription,
    };
    var invoiceService = new InvoiceService();
    Invoice upcomingInvoice;
    try
    {
        upcomingInvoice = invoiceService.Upcoming(invoiceOptions);
    }
    catch (StripeException e)
    {
        return this.FailWithMessage($"Failed to retrieve upcoming invoice: {e}");
    }

    return new RetrieveSubscriptionInformationResponse
    {
        Card = subscription.Customer.InvoiceSettings.DefaultPaymentMethod.Card,
        ProductDescription = subscription.Plan.Product.Name,
        CurrentPrice = subscription.Plan.Id,
        CurrentQuantity = subscription.Items.Data[0].Quantity,
        LatestInvoice = subscription.LatestInvoice,
        UpcomingInvoice = upcomingInvoice,
    };
}
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
StripeConfiguration.ApiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

[HttpPost("retrieve-subscription-information")]
public ActionResult<RetrieveSubscriptionInformationResponse> RetrieveSubscriptionInformation([FromBody] RetrieveSubscriptionInformationRequest req)
{
    var options = new SubscriptionGetOptions();
    options.AddExpand("latest_invoice");
    options.AddExpand("customer.invoice_settings.default_payment_method");
    options.AddExpand("plan.product");
    var service = new SubscriptionService();
    Subscription subscription;
    try
    {
        subscription = service.Get(req.Subscription, options);
    }
    catch (StripeException e)
    {
        return this.FailWithMessage($"Failed to retrieve subscription with ID ({req.Subscription}): {e}");
    }

    var invoiceOptions = new UpcomingInvoiceOptions
    {
        Subscription = req.Subscription,
    };
    var invoiceService = new InvoiceService();
    Invoice upcomingInvoice;
    try
    {
        upcomingInvoice = invoiceService.Upcoming(invoiceOptions);
    }
    catch (StripeException e)
    {
        return this.FailWithMessage($"Failed to retrieve upcoming invoice: {e}");
    }

    return new RetrieveSubscriptionInformationResponse
    {
        Card = subscription.Customer.InvoiceSettings.DefaultPaymentMethod.Card,
        ProductDescription = subscription.Plan.Product.Name,
        CurrentPrice = subscription.Plan.Id,
        CurrentQuantity = subscription.Items.Data[0].Quantity,
        LatestInvoice = subscription.LatestInvoice,
        UpcomingInvoice = upcomingInvoice,
    };
}
