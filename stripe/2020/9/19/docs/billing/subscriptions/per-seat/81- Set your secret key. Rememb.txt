// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

post(
  "/retry-invoice",
  (request, response) -> {
    response.type("application/json");
    // Set the default payment method on the customer
    RetryInvoiceBody postBody = gson.fromJson(
      request.body(),
      RetryInvoiceBody.class
    );
    Customer customer = Customer.retrieve(postBody.getCustomerId());

    try {
      // Set the default payment method on the customer
      PaymentMethod pm = PaymentMethod.retrieve(
        postBody.getPaymentMethodId()
      );
      pm.attach(
        PaymentMethodAttachParams
          .builder()
          .setCustomer(customer.getId())
          .build()
      );
    } catch (CardException e) {
      // Since it's a decline, CardException will be caught
      Map<String, String> responseErrorMessage = new HashMap<>();
      responseErrorMessage.put("message", e.getLocalizedMessage());
      Map<String, Object> responseError = new HashMap<>();
      responseError.put("error", responseErrorMessage);
      return gson.toJson(responseError);
    }

    CustomerUpdateParams customerUpdateParams = CustomerUpdateParams
      .builder()
      .setInvoiceSettings(
        CustomerUpdateParams
          .InvoiceSettings.builder()
          .setDefaultPaymentMethod(postBody.getPaymentMethodId())
          .build()
      )
      .build();

    customer.update(customerUpdateParams);

    InvoiceRetrieveParams params = InvoiceRetrieveParams
      .builder()
      .addAllExpand(Arrays.asList("payment_intent"))
      .build();

    Invoice invoice = Invoice.retrieve(
      postBody.getInvoiceId(),
      params,
      null
    );

    return invoice.toJson();
  }
);
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

post(
  "/retry-invoice",
  (request, response) -> {
    response.type("application/json");
    // Set the default payment method on the customer
    RetryInvoiceBody postBody = gson.fromJson(
      request.body(),
      RetryInvoiceBody.class
    );
    Customer customer = Customer.retrieve(postBody.getCustomerId());

    try {
      // Set the default payment method on the customer
      PaymentMethod pm = PaymentMethod.retrieve(
        postBody.getPaymentMethodId()
      );
      pm.attach(
        PaymentMethodAttachParams
          .builder()
          .setCustomer(customer.getId())
          .build()
      );
    } catch (CardException e) {
      // Since it's a decline, CardException will be caught
      Map<String, String> responseErrorMessage = new HashMap<>();
      responseErrorMessage.put("message", e.getLocalizedMessage());
      Map<String, Object> responseError = new HashMap<>();
      responseError.put("error", responseErrorMessage);
      return gson.toJson(responseError);
    }

    CustomerUpdateParams customerUpdateParams = CustomerUpdateParams
      .builder()
      .setInvoiceSettings(
        CustomerUpdateParams
          .InvoiceSettings.builder()
          .setDefaultPaymentMethod(postBody.getPaymentMethodId())
          .build()
      )
      .build();

    customer.update(customerUpdateParams);

    InvoiceRetrieveParams params = InvoiceRetrieveParams
      .builder()
      .addAllExpand(Arrays.asList("payment_intent"))
      .build();

    Invoice invoice = Invoice.retrieve(
      postBody.getInvoiceId(),
      params,
      null
    );

    return invoice.toJson();
  }
);
