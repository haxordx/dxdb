// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
\Stripe\Stripe::setApiKey('sk_test_4eC39HqLyjWDarjtT1zdp7dc');

$app->post('/update-subscription', function (Request $request, Response $response, array $args) {
  $body = json_decode($request->getBody());


  $stripe = $this->stripe;

  $subscription = $stripe->subscriptions->retrieve($body->subscriptionId);
  $current_price = $subscription->items->data[0]->price->id;
  $new_price = getenv(strtoupper($body->newPriceId));
  $quantity = $body->quantity;

  if ($current_price == $new_price)
  {
    $this->logger->addInfo('updating quantity of existing item');
    $updatedSubscription = $stripe->subscriptions->update(
      $body->subscriptionId, [
      'items' => [
        [
          'id' => $subscription->items->data[0]->id,
          'quantity' => $quantity
        ],
      ],
     'expand' => ['plan.product']]);
  }
  else
  {
    $updatedSubscription = $stripe->subscriptions->update(
      $body->subscriptionId, [
      'items' => [
        [
          'id' => $subscription->items->data[0]->id,
          'deleted' => true
        ],
        [
          'price' => $new_price,
          'quantity' => $quantity
        ],
      ],
      'expand' => ['plan.product']]);
  }

  #invoice and charge the customer immediately for the payment representing any balance that the customer accrued
  #as a result of the change.  For example, if the user added seats for this month, this would charge the proration amount for those
  # extra seats for the remaining part of the month.

  $invoice = $stripe->invoices->create([
    'customer' => $subscription->customer,
    'subscription' => $subscription->id,
    'description' => 'Change to '. $quantity . ' seat(s) on the '. $updatedSubscription->plan->product->name . ' plan'
  ]);

  $invoice = $invoice->pay();

  return $response->withJson(['subscription' => $updatedSubscription]);
});
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
\Stripe\Stripe::setApiKey('sk_test_4eC39HqLyjWDarjtT1zdp7dc');

$app->post('/update-subscription', function (Request $request, Response $response, array $args) {
  $body = json_decode($request->getBody());


  $stripe = $this->stripe;

  $subscription = $stripe->subscriptions->retrieve($body->subscriptionId);
  $current_price = $subscription->items->data[0]->price->id;
  $new_price = getenv(strtoupper($body->newPriceId));
  $quantity = $body->quantity;

  if ($current_price == $new_price)
  {
    $this->logger->addInfo('updating quantity of existing item');
    $updatedSubscription = $stripe->subscriptions->update(
      $body->subscriptionId, [
      'items' => [
        [
          'id' => $subscription->items->data[0]->id,
          'quantity' => $quantity
        ],
      ],
     'expand' => ['plan.product']]);
  }
  else
  {
    $updatedSubscription = $stripe->subscriptions->update(
      $body->subscriptionId, [
      'items' => [
        [
          'id' => $subscription->items->data[0]->id,
          'deleted' => true
        ],
        [
          'price' => $new_price,
          'quantity' => $quantity
        ],
      ],
      'expand' => ['plan.product']]);
  }

  #invoice and charge the customer immediately for the payment representing any balance that the customer accrued
  #as a result of the change.  For example, if the user added seats for this month, this would charge the proration amount for those
  # extra seats for the remaining part of the month.

  $invoice = $stripe->invoices->create([
    'customer' => $subscription->customer,
    'subscription' => $subscription->id,
    'description' => 'Change to '. $quantity . ' seat(s) on the '. $updatedSubscription->plan->product->name . ' plan'
  ]);

  $invoice = $invoice->pay();

  return $response->withJson(['subscription' => $updatedSubscription]);
});
