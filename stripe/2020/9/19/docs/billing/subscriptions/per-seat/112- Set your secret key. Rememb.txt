// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
StripeConfiguration.ApiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

[HttpPost("update-subscription")]
public ActionResult<UpdateSubscriptionResponse> UpdateSubscription([FromBody] UpdateSubscriptionRequest req)
{
    var newPrice = Environment.GetEnvironmentVariable(req.NewPrice);
    if (newPrice is null || newPrice == "")
    {
        return this.FailWithMessage($"No price with the new price ID ({req.NewPrice}) found in .env");
    }

    var service = new SubscriptionService();
    Subscription subscription;
    try
    {
        subscription = service.Get(req.Subscription);
    }
    catch (StripeException e)
    {
        return this.FailWithMessage($"Failed to retrieve subscription: {e}");
    }
    var currentPrice = subscription.Items.Data[0].Price.Id;

    List<SubscriptionItemOptions> items;

    if (currentPrice == newPrice)
    {
        items = new List<SubscriptionItemOptions>
        {
            new SubscriptionItemOptions
            {
                Id = subscription.Items.Data[0].Id,
                Quantity = req.Quantity,
            },
        };
    }
    else
    {
        items = new List<SubscriptionItemOptions>
        {
            new SubscriptionItemOptions
            {
                Id = subscription.Items.Data[0].Id,
                Deleted = true,
            },
            new SubscriptionItemOptions
            {
                Price = newPrice,
                Quantity = req.Quantity,
            },
        };
    }

    var options = new SubscriptionUpdateOptions
    {
        CancelAtPeriodEnd = false,
        Items = items,
        ProrationBehavior = "always_invoice",
    };
    var updatedSubscription = service.Update(req.Subscription, options);
    return new UpdateSubscriptionResponse
    {
        Subscription = updatedSubscription,
    };
}
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
StripeConfiguration.ApiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

[HttpPost("update-subscription")]
public ActionResult<UpdateSubscriptionResponse> UpdateSubscription([FromBody] UpdateSubscriptionRequest req)
{
    var newPrice = Environment.GetEnvironmentVariable(req.NewPrice);
    if (newPrice is null || newPrice == "")
    {
        return this.FailWithMessage($"No price with the new price ID ({req.NewPrice}) found in .env");
    }

    var service = new SubscriptionService();
    Subscription subscription;
    try
    {
        subscription = service.Get(req.Subscription);
    }
    catch (StripeException e)
    {
        return this.FailWithMessage($"Failed to retrieve subscription: {e}");
    }
    var currentPrice = subscription.Items.Data[0].Price.Id;

    List<SubscriptionItemOptions> items;

    if (currentPrice == newPrice)
    {
        items = new List<SubscriptionItemOptions>
        {
            new SubscriptionItemOptions
            {
                Id = subscription.Items.Data[0].Id,
                Quantity = req.Quantity,
            },
        };
    }
    else
    {
        items = new List<SubscriptionItemOptions>
        {
            new SubscriptionItemOptions
            {
                Id = subscription.Items.Data[0].Id,
                Deleted = true,
            },
            new SubscriptionItemOptions
            {
                Price = newPrice,
                Quantity = req.Quantity,
            },
        };
    }

    var options = new SubscriptionUpdateOptions
    {
        CancelAtPeriodEnd = false,
        Items = items,
        ProrationBehavior = "always_invoice",
    };
    var updatedSubscription = service.Update(req.Subscription, options);
    return new UpdateSubscriptionResponse
    {
        Subscription = updatedSubscription,
    };
}
