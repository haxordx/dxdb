// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

func handleWebhook(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }
  b, err := ioutil.ReadAll(r.Body)
  if err != nil {
    http.Error(w, err.Error(), http.StatusBadRequest)
    log.Printf("ioutil.ReadAll: %v", err)
    return
  }

  event, err := webhook.ConstructEvent(b, r.Header.Get("Stripe-Signature"), os.Getenv("STRIPE_WEBHOOK_SECRET"))
  if err != nil {
    http.Error(w, err.Error(), http.StatusBadRequest)
    log.Printf("webhook.ConstructEvent: %v", err)
    return
  }

  if event.Type == "invoice.paid" {
    // Used to provision services after the trial has ended.
    // The status of the invoice will show up as paid. Store the status in your
    // database to reference when a user accesses your service to avoid hitting rate
    // limits.
    return
  }

  if event.Type == "invoice.payment_failed" {
    // If the payment fails or the customer does not have a valid payment method,
    // an invoice.payment_failed event is sent, the subscription becomes past_due.
    // Use this webhook to notify your user that their payment has
    // failed and to retrieve new card details.
    return
  }

  if event.Type == "customer.subscription.deleted" {
    // handle subscription cancelled automatically based
    // upon your subscription settings. Or if the user cancels it. {
    return
  }
}
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

func handleWebhook(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }
  b, err := ioutil.ReadAll(r.Body)
  if err != nil {
    http.Error(w, err.Error(), http.StatusBadRequest)
    log.Printf("ioutil.ReadAll: %v", err)
    return
  }

  event, err := webhook.ConstructEvent(b, r.Header.Get("Stripe-Signature"), os.Getenv("STRIPE_WEBHOOK_SECRET"))
  if err != nil {
    http.Error(w, err.Error(), http.StatusBadRequest)
    log.Printf("webhook.ConstructEvent: %v", err)
    return
  }

  if event.Type == "invoice.paid" {
    // Used to provision services after the trial has ended.
    // The status of the invoice will show up as paid. Store the status in your
    // database to reference when a user accesses your service to avoid hitting rate
    // limits.
    return
  }

  if event.Type == "invoice.payment_failed" {
    // If the payment fails or the customer does not have a valid payment method,
    // an invoice.payment_failed event is sent, the subscription becomes past_due.
    // Use this webhook to notify your user that their payment has
    // failed and to retrieve new card details.
    return
  }

  if event.Type == "customer.subscription.deleted" {
    // handle subscription cancelled automatically based
    // upon your subscription settings. Or if the user cancels it. {
    return
  }
}
