// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

func handleUpdateSubscription(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }

  var req struct {
    SubscriptionID string `json:"subscriptionId"`
    NewPriceID     string `json:"newPriceId"`
    Quantity       int64  `json:"quantity"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  s, err := sub.Get(req.SubscriptionID, nil)
  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("sub.Get: %v", err)
    return
  }
  currentPriceID := s.Items.Data[0].Price.ID
  newPriceID := os.Getenv(req.NewPriceID)

  var params *stripe.SubscriptionParams

  if currentPriceID == newPriceID {
    params = &stripe.SubscriptionParams{
      Items: []*stripe.SubscriptionItemsParams{{
        ID:       stripe.String(s.Items.Data[0].ID),
        Quantity: stripe.Int64(req.Quantity),
      }},
    }
  } else {
    params = &stripe.SubscriptionParams{
      Items: []*stripe.SubscriptionItemsParams{{
        ID:      stripe.String(s.Items.Data[0].ID),
        Deleted: stripe.Bool(true),
      }, {
        Price:    stripe.String(newPriceID),
        Quantity: stripe.Int64(req.Quantity),
      }},
    }
  }
  params.AddExpand("plan.product")

  updatedSubscription, err := sub.Update(req.SubscriptionID, params)

  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("sub.Update: %v", err)
    return
  }

  writeJSON(w, struct {
    Subscription *stripe.Subscription `json:"subscription"`
  }{
    Subscription: updatedSubscription,
  })
}
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

func handleUpdateSubscription(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }

  var req struct {
    SubscriptionID string `json:"subscriptionId"`
    NewPriceID     string `json:"newPriceId"`
    Quantity       int64  `json:"quantity"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  s, err := sub.Get(req.SubscriptionID, nil)
  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("sub.Get: %v", err)
    return
  }
  currentPriceID := s.Items.Data[0].Price.ID
  newPriceID := os.Getenv(req.NewPriceID)

  var params *stripe.SubscriptionParams

  if currentPriceID == newPriceID {
    params = &stripe.SubscriptionParams{
      Items: []*stripe.SubscriptionItemsParams{{
        ID:       stripe.String(s.Items.Data[0].ID),
        Quantity: stripe.Int64(req.Quantity),
      }},
    }
  } else {
    params = &stripe.SubscriptionParams{
      Items: []*stripe.SubscriptionItemsParams{{
        ID:      stripe.String(s.Items.Data[0].ID),
        Deleted: stripe.Bool(true),
      }, {
        Price:    stripe.String(newPriceID),
        Quantity: stripe.Int64(req.Quantity),
      }},
    }
  }
  params.AddExpand("plan.product")

  updatedSubscription, err := sub.Update(req.SubscriptionID, params)

  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("sub.Update: %v", err)
    return
  }

  writeJSON(w, struct {
    Subscription *stripe.Subscription `json:"subscription"`
  }{
    Subscription: updatedSubscription,
  })
}
