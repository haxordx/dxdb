# Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.api_key = 'sk_test_4eC39HqLyjWDarjtT1zdp7dc'

post '/retrieve-upcoming-invoice' do
  content_type 'application/json'
  data = JSON.parse request.body.read

  new_price = ENV[data['newPriceId'].upcase]
  quantity = data['quantity']

  params = {}
  params[:customer] = data['customerId']

  if !data['subscriptionId'].nil?
    subscription = Stripe::Subscription.retrieve(data['subscriptionId'])
    params[:subscription] = data['subscriptionId']

    # compare the current price to the new price, and only create a new subscription if they are different
    # otherwise, just add seats to the existing subscription
    # subscription.plan.id would also work

    current_price = subscription.items.data[0].price.id

    params[:subscription_items] =
      if current_price == new_price
        [{ id: subscription.items.data[0].id, quantity: quantity }]
      else
        [
          { id: subscription.items.data[0].id, deleted: true },
          { price: new_price, quantity: quantity }
        ]
      end
  else
    params[:subscription_items] = [{ price: new_price, quantity: quantity }]  end

  invoice = Stripe::Invoice.upcoming(params)

  response = {}

  # in the case where we are returning the upcoming invoice for a subscription change, calculate what the
  # invoice totals would be for the invoice we'll charge immediately when they confirm the change, and
  # also return the amount for the next period's invoice.
  if !subscription.nil?
    current_period_end = subscription.current_period_end
    immediate_total = 0
    next_invoice_sum = 0

    invoice.lines.data.each do |invoiceLineItem|
      if invoiceLineItem.period.end == current_period_end
        immediate_total += invoiceLineItem.amount
      else
        next_invoice_sum += invoiceLineItem.amount
      end
    end
    response = {
      immediate_total: immediate_total,
      next_invoice_sum: next_invoice_sum,
      invoice: invoice
    }
  else
    response = { invoice: invoice }
  end

  response.to_json
end# Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.api_key = 'sk_test_4eC39HqLyjWDarjtT1zdp7dc'

post '/retrieve-upcoming-invoice' do
  content_type 'application/json'
  data = JSON.parse request.body.read

  new_price = ENV[data['newPriceId'].upcase]
  quantity = data['quantity']

  params = {}
  params[:customer] = data['customerId']

  if !data['subscriptionId'].nil?
    subscription = Stripe::Subscription.retrieve(data['subscriptionId'])
    params[:subscription] = data['subscriptionId']

    # compare the current price to the new price, and only create a new subscription if they are different
    # otherwise, just add seats to the existing subscription
    # subscription.plan.id would also work

    current_price = subscription.items.data[0].price.id

    params[:subscription_items] =
      if current_price == new_price
        [{ id: subscription.items.data[0].id, quantity: quantity }]
      else
        [
          { id: subscription.items.data[0].id, deleted: true },
          { price: new_price, quantity: quantity }
        ]
      end
  else
    params[:subscription_items] = [{ price: new_price, quantity: quantity }]