// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

func handleRetrieveSubscriptionInformation(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }
  var req struct {
    SubscriptionID string `json:"subscriptionId"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  params := &stripe.SubscriptionParams{}
  params.AddExpand("latest_invoice")
  params.AddExpand("customer.invoice_settings.default_payment_method")
  params.AddExpand("plan.product")
  s, err := sub.Get(req.SubscriptionID, params)
  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("sub.Get: %v", err)
    return
  }

  invoiceParams := &stripe.InvoiceParams{
    Subscription: stripe.String(req.SubscriptionID),
  }
  upcomingInvoice, err := invoice.GetNext(invoiceParams)
  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("invoice.GetNext: %v", err)
    return
  }

  writeJSON(w, struct {
    Card            *stripe.PaymentMethodCard `json:"card"`
    Description     string                    `json:"product_description"`
    CurrentPriceID  string                    `json:"current_price"`
    CurrentQuantity int64                     `json:"current_quantity"`
    LatestInvoice   *stripe.Invoice           `json:"latest_invoice"`
    UpcomingInvoice *stripe.Invoice           `json:"upcoming_invoice"`
  }{
    Card:            s.Customer.InvoiceSettings.DefaultPaymentMethod.Card,
    Description:     s.Plan.Product.Name,
    CurrentPriceID:  s.Plan.ID,
    LatestInvoice:   s.LatestInvoice,
    UpcomingInvoice: upcomingInvoice,
  })
}
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.Key = "sk_test_4eC39HqLyjWDarjtT1zdp7dc"

func handleRetrieveSubscriptionInformation(w http.ResponseWriter, r *http.Request) {
  if r.Method != "POST" {
    http.Error(w, http.StatusText(http.StatusMethodNotAllowed), http.StatusMethodNotAllowed)
    return
  }
  var req struct {
    SubscriptionID string `json:"subscriptionId"`
  }

  if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
    http.Error(w, err.Error(), http.StatusInternalServerError)
    log.Printf("json.NewDecoder.Decode: %v", err)
    return
  }

  params := &stripe.SubscriptionParams{}
  params.AddExpand("latest_invoice")
  params.AddExpand("customer.invoice_settings.default_payment_method")
  params.AddExpand("plan.product")
  s, err := sub.Get(req.SubscriptionID, params)
  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("sub.Get: %v", err)
    return
  }

  invoiceParams := &stripe.InvoiceParams{
    Subscription: stripe.String(req.SubscriptionID),
  }
  upcomingInvoice, err := invoice.GetNext(invoiceParams)
  if err != nil {
    writeJSONErrorMessage(w, err.Error(), 422)
    log.Printf("invoice.GetNext: %v", err)
    return
  }

  writeJSON(w, struct {
    Card            *stripe.PaymentMethodCard `json:"card"`
    Description     string                    `json:"product_description"`
    CurrentPriceID  string                    `json:"current_price"`
    CurrentQuantity int64                     `json:"current_quantity"`
    LatestInvoice   *stripe.Invoice           `json:"latest_invoice"`
    UpcomingInvoice *stripe.Invoice           `json:"upcoming_invoice"`
  }{
    Card:            s.Customer.InvoiceSettings.DefaultPaymentMethod.Card,
    Description:     s.Plan.Product.Name,
    CurrentPriceID:  s.Plan.ID,
    LatestInvoice:   s.LatestInvoice,
    UpcomingInvoice: upcomingInvoice,
  })
}
