# Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.api_key = 'sk_test_4eC39HqLyjWDarjtT1zdp7dc'

@app.route('/retrieve-upcoming-invoice', methods=['POST'])
def retrieveUpcomingInvoice():
    data = json.loads(request.data)
    try:
        new_price = os.getenv(data['newPriceId'].upper())
        quantity = data['quantity']
        subscriptionId = data['subscriptionId']

        params = dict(
            customer=data['customerId']
        )

        if subscriptionId != None:
            # Retrieve the subscription
            subscription = stripe.Subscription.retrieve(data['subscriptionId'])
            params["subscription"] = subscriptionId
            current_price = subscription['items']['data'][0].price.id

            if current_price == new_price:
                params["subscription_items"] = [
                    {
                        "id": subscription['items']['data'][0].id,
                        "quantity":quantity
                    }]

            else:                params["subscription_items"] = [
                    {
                        "id": subscription['items']['data'][0].id,
                        "deleted": True
                    },
                    {
                        "price": new_price,
                        "quantity": quantity
                    }
                ]

        else:
            params["subscription_items"] = [
                {
                    "price": new_price,
                    "quantity": quantity
                }
            ]

        # Retrive the Invoice
        invoice = stripe.Invoice.upcoming(**params)
        response = {}

        if data['subscriptionId'] != None:
            current_period_end = subscription.current_period_end
            immediate_total = 0
            next_invoice_sum = 0

            for invoiceLineItem in invoice.lines.data:
                if invoiceLineItem.period.end == current_period_end:
                    immediate_total += invoiceLineItem.amount
                else:
                    next_invoice_sum += invoiceLineItem.amount

            response = {
                'immediate_total': immediate_total,
                'next_invoice_sum': next_invoice_sum,
                'invoice': invoice
            }
        else:
            response = {
                'invoice': invoice
            }

        return jsonify(response)
    except Exception as e:
        return jsonify(error=str(e)), 403# Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys
stripe.api_key = 'sk_test_4eC39HqLyjWDarjtT1zdp7dc'

@app.route('/retrieve-upcoming-invoice', methods=['POST'])
def retrieveUpcomingInvoice():
    data = json.loads(request.data)
    try:
        new_price = os.getenv(data['newPriceId'].upper())
        quantity = data['quantity']
        subscriptionId = data['subscriptionId']

        params = dict(
            customer=data['customerId']
        )

        if subscriptionId != None:
            # Retrieve the subscription
            subscription = stripe.Subscription.retrieve(data['subscriptionId'])
            params["subscription"] = subscriptionId
            current_price = subscription['items']['data'][0].price.id

            if current_price == new_price:
                params["subscription_items"] = [
                    {
                        "id": subscription['items']['data'][0].id,
                        "quantity":quantity
                    }]

            else: