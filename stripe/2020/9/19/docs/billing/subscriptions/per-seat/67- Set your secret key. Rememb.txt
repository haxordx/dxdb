// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

post(
  "/create-subscription",
  (request, response) -> {
    response.type("application/json");
    // Set the default payment method on the customer
    CreateSubscriptionBody postBody = gson.fromJson(
      request.body(),
      CreateSubscriptionBody.class
    );
    Customer customer = Customer.retrieve(postBody.getCustomerId());

    try {
      // Set the default payment method on the customer
      PaymentMethod pm = PaymentMethod.retrieve(
        postBody.getPaymentMethodId()
      );
      pm.attach(
        PaymentMethodAttachParams
          .builder()
          .setCustomer(customer.getId())
          .build()
      );
    } catch (CardException e) {
      // Since it's a decline, CardException will be caught
      Map<String, String> responseErrorMessage = new HashMap<>();
      responseErrorMessage.put("message", e.getLocalizedMessage());
      Map<String, Object> responseError = new HashMap<>();
      responseError.put("error", responseErrorMessage);

      return gson.toJson(responseError);
    }

    CustomerUpdateParams customerUpdateParams = CustomerUpdateParams
      .builder()
      .setInvoiceSettings(
        CustomerUpdateParams
          .InvoiceSettings.builder()
          .setDefaultPaymentMethod(postBody.getPaymentMethodId())
          .build()
      )
      .build();

    customer.update(customerUpdateParams);

    SubscriptionCreateParams subCreateParams = SubscriptionCreateParams
      .builder()
      .addItem(
        SubscriptionCreateParams
          .Item.builder()
          .setPrice("price_HGd7M3DV3IMXkC")
          .setQuantity(postBody.getQuantity())
          .build()
      )
      .setCustomer(customer.getId())
      .addAllExpand(
        Arrays.asList("latest_invoice.payment_intent", "plan.product")
      )
      .build();

    Subscription subscription = Subscription.create(subCreateParams);

    return subscription.toJson();
  }
);
// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

post(
  "/create-subscription",
  (request, response) -> {
    response.type("application/json");
    // Set the default payment method on the customer
    CreateSubscriptionBody postBody = gson.fromJson(
      request.body(),
      CreateSubscriptionBody.class
    );
    Customer customer = Customer.retrieve(postBody.getCustomerId());

    try {
      // Set the default payment method on the customer
      PaymentMethod pm = PaymentMethod.retrieve(
        postBody.getPaymentMethodId()
      );
      pm.attach(
        PaymentMethodAttachParams
          .builder()
          .setCustomer(customer.getId())
          .build()
      );
    } catch (CardException e) {
      // Since it's a decline, CardException will be caught
      Map<String, String> responseErrorMessage = new HashMap<>();
      responseErrorMessage.put("message", e.getLocalizedMessage());
      Map<String, Object> responseError = new HashMap<>();
      responseError.put("error", responseErrorMessage);

      return gson.toJson(responseError);
    }

    CustomerUpdateParams customerUpdateParams = CustomerUpdateParams
      .builder()
      .setInvoiceSettings(
        CustomerUpdateParams
          .InvoiceSettings.builder()
          .setDefaultPaymentMethod(postBody.getPaymentMethodId())
          .build()
      )
      .build();

    customer.update(customerUpdateParams);

    SubscriptionCreateParams subCreateParams = SubscriptionCreateParams
      .builder()
      .addItem(
        SubscriptionCreateParams
          .Item.builder()
          .setPrice("price_HGd7M3DV3IMXkC")
          .setQuantity(postBody.getQuantity())
          .build()
      )
      .setCustomer(customer.getId())
      .addAllExpand(
        Arrays.asList("latest_invoice.payment_intent", "plan.product")
      )
      .build();

    Subscription subscription = Subscription.create(subCreateParams);

    return subscription.toJson();
  }
);
