// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

post(
  "/retrieve-upcoming-invoice",
  (request, response) -> {
    response.type("application/json");
    UpcomingInvoicePostBody postBody = gson.fromJson(
      request.body(),
      UpcomingInvoicePostBody.class
    );
    String newPrice = dotenv.get(postBody.getNewPriceId().toUpperCase());
    Long quantity = postBody.getQuantity();

    InvoiceUpcomingParams.Builder invoiceParamsBuilder = new InvoiceUpcomingParams.Builder();
    invoiceParamsBuilder.setCustomer(postBody.getCustomerId());
    String subscriptionId = postBody.getSubscriptionId();
    Subscription subscription = null;

    if (subscriptionId != null) {
      invoiceParamsBuilder.setSubscription(subscriptionId);

      subscription = Subscription.retrieve(subscriptionId);
      String currentPrice = subscription
        .getItems()
        .getData()
        .get(0)
        .getPrice()
        .getId();

      if (currentPrice.equals(newPrice)) {        invoiceParamsBuilder.addSubscriptionItem(
          InvoiceUpcomingParams
            .SubscriptionItem.builder()
            .setId(subscription.getItems().getData().get(0).getId())
            .setQuantity(quantity)
            .build()
        );
      } else {
        invoiceParamsBuilder.addSubscriptionItem(
          InvoiceUpcomingParams
            .SubscriptionItem.builder()
            .setId(subscription.getItems().getData().get(0).getId())
            .setDeleted(true)
            .build()
        );
        invoiceParamsBuilder.addSubscriptionItem(
          InvoiceUpcomingParams
            .SubscriptionItem.builder()
            .setPrice(newPrice)
            .setQuantity(quantity)
            .build()
        );
      }
    } else {
      invoiceParamsBuilder.addSubscriptionItem(
        InvoiceUpcomingParams
          .SubscriptionItem.builder()
          .setPrice(newPrice)
          .setQuantity(quantity)
          .build()
      );
    }

    Invoice invoice = Invoice.upcoming(invoiceParamsBuilder.build());
    Map<String, Object> responseData = new HashMap<>();

    /*
      * in the case where we are returning the upcoming invoice for a subscription
      * change, calculate what the invoice totals would be for the invoice we'll
      * charge immediately when they confirm the change, and also return the amount
      * for the next period's invoice.
      */
    if (subscription != null) {
      Long currentPeriodEnd = subscription.getCurrentPeriodEnd();
      Long immediateTotal = 0L;
      Long nextInvoiceSum = 0L;

      for (InvoiceLineItem invoiceLineItem : invoice
        .getLines()
        .autoPagingIterable()) {
        if (
          invoiceLineItem.getPeriod().getEnd().equals(currentPeriodEnd)
        ) immediateTotal +=
          invoiceLineItem.getAmount(); else nextInvoiceSum =
          invoiceLineItem.getAmount();
      }
      responseData.put("immediate_total", immediateTotal);
      responseData.put("next_invoice_sum", nextInvoiceSum);
    }

    responseData.put("invoice", invoice);
    return StripeObject.PRETTY_PRINT_GSON.toJson(responseData);
  }
);// Set your secret key. Remember to switch to your live secret key in production!
// See your keys here: https://dashboard.stripe.com/account/apikeys
Stripe.apiKey = "sk_test_4eC39HqLyjWDarjtT1zdp7dc";

post(
  "/retrieve-upcoming-invoice",
  (request, response) -> {
    response.type("application/json");
    UpcomingInvoicePostBody postBody = gson.fromJson(
      request.body(),
      UpcomingInvoicePostBody.class
    );
    String newPrice = dotenv.get(postBody.getNewPriceId().toUpperCase());
    Long quantity = postBody.getQuantity();

    InvoiceUpcomingParams.Builder invoiceParamsBuilder = new InvoiceUpcomingParams.Builder();
    invoiceParamsBuilder.setCustomer(postBody.getCustomerId());
    String subscriptionId = postBody.getSubscriptionId();
    Subscription subscription = null;

    if (subscriptionId != null) {
      invoiceParamsBuilder.setSubscription(subscriptionId);

      subscription = Subscription.retrieve(subscriptionId);
      String currentPrice = subscription
        .getItems()
        .getData()
        .get(0)
        .getPrice()
        .getId();

      if (currentPrice.equals(newPrice)) {