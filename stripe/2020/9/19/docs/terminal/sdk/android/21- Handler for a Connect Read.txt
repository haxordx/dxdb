// Handler for a "Connect Reader" button
fun onConnect() {
  val config = DiscoveryConfiguration(0, DeviceType.CHIPPER_2X, true)
  Terminal.getInstance().discoverReaders(config, { readers: List<Reader> ->
    // Just select the first reader here.
    val firstReader = readers.first()

    Terminal.getInstance().connectReader(firstReader, object : ReaderCallback {
      override fun onSuccess(r: Reader) {
          println("Connected to reader")
      }

      override fun onFailure(e: TerminalException) {
          e.printStackTrace()
      }
    })
  }, object : Callback {
    override fun onSuccess() {
      println("Finished discovering readers")
    }

    override fun onFailure(e: TerminalException) {
      e.printStackTrace()
    }
  })
}// Handler for a "Connect Reader" button
fun onConnect() {
  val config = DiscoveryConfiguration(0, DeviceType.CHIPPER_2X, true)
  Terminal.getInstance().discoverReaders(config, { readers: List<Reader> ->
    // Just select the first reader here.
    val firstReader = readers.first()

    Terminal.getInstance().connectReader(firstReader, object : ReaderCallback {
      override fun onSuccess(r: Reader) {
          println("Connected to reader")
      }

      override fun onFailure(e: TerminalException) {
          e.printStackTrace()
      }
    })
  }, object : Callback {
    override fun onSuccess() {
      println("Finished discovering readers")
    }

    override fun onFailure(e: TerminalException) {
      e.printStackTrace()
    }
  })
}