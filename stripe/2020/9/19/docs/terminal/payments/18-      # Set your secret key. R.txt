      # Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys


import UIKit
import StripeTerminal

class PaymentViewController: UIViewController, ReaderDisplayDelegate {

    // Label for displaying messages from the card reader
    let readerMessageLabel = UILabel(frame: .zero)
    var collectCancelable: Cancelable? = nil

    // ...

    // Action for a "Checkout" button
    func checkoutAction() {
        let params = PaymentIntentParameters(amount: 1000, currency: "usd")
        Terminal.shared.createPaymentIntent(params) { createResult, createError in
            if let error = createError {
                print("createPaymentIntent failed: (error)")
            }
            else if let paymentIntent = createResult {
                print("createPaymentIntent succeeded")
                self.collectCancelable = Terminal.shared.collectPaymentMethod(paymentIntent, delegate: self) { collectResult, collectError in
                    if let error = collectError {
                        print("collectPaymentMethod failed: (error)")
                    }
                    else if let paymentIntent = collectResult {
                        print("collectPaymentMethod succeeded")
                        // ... Process the payment
                    }
                }
            }

        }
    }

    // MARK: ReaderDisplayDelegate

    func terminal(_ terminal: Terminal, didRequestReaderInput inputOptions: ReaderInputOptions = []) {
        readerMessageLabel.text = Terminal.stringFromReaderInputOptions(inputOptions)
    }

    func terminal(_ terminal: Terminal, didRequestReaderDisplayMessage displayMessage: ReaderDisplayMessage) {
        readerMessageLabel.text = Terminal.stringFromReaderDisplayMessage(displayMessage)
    }
}
      # Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys


import UIKit
import StripeTerminal

class PaymentViewController: UIViewController, ReaderDisplayDelegate {

    // Label for displaying messages from the card reader
    let readerMessageLabel = UILabel(frame: .zero)
    var collectCancelable: Cancelable? = nil

    // ...

    // Action for a "Checkout" button
    func checkoutAction() {
        let params = PaymentIntentParameters(amount: 1000, currency: "usd")
        Terminal.shared.createPaymentIntent(params) { createResult, createError in
            if let error = createError {
                print("createPaymentIntent failed: (error)")
            }
            else if let paymentIntent = createResult {
                print("createPaymentIntent succeeded")
                self.collectCancelable = Terminal.shared.collectPaymentMethod(paymentIntent, delegate: self) { collectResult, collectError in
                    if let error = collectError {
                        print("collectPaymentMethod failed: (error)")
                    }
                    else if let paymentIntent = collectResult {
                        print("collectPaymentMethod succeeded")
                        // ... Process the payment
                    }
                }
            }

        }
    }

    // MARK: ReaderDisplayDelegate

    func terminal(_ terminal: Terminal, didRequestReaderInput inputOptions: ReaderInputOptions = []) {
        readerMessageLabel.text = Terminal.stringFromReaderInputOptions(inputOptions)
    }

    func terminal(_ terminal: Terminal, didRequestReaderDisplayMessage displayMessage: ReaderDisplayMessage) {
        readerMessageLabel.text = Terminal.stringFromReaderDisplayMessage(displayMessage)
    }
}
