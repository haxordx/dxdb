      # Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys


#import "APPPaymentViewController.h"
#import <StripeTerminal/StripeTerminal.h>

@interface APPPaymentViewController () <SCPReaderDisplayDelegate>

// Label for displaying messages from the card reader
@property (nonatomic, nullable, strong) UILabel *readerMessageLabel;
@property (nonatomic, nullable, strong) SCPCancelable *collectCancelable;

@end

@implementation APPPaymentViewController

// ...

// Action for a "Checkout" button
- (void)checkoutAction {
    SCPPaymentIntentParameters *params = [[SCPPaymentIntentParameters alloc] initWithAmount:1000
                                                                                   currency:@"usd"];
    [[SCPTerminal shared] createPaymentIntent:params completion:^(SCPPaymentIntent *createResult, NSError *createError) {
        if (createError) {
            NSLog(@"createPaymentIntent failed: %@", createError);
        } else {
            NSLog(@"createPaymentIntent succeeded");
            self.collectCancelable = [[SCPTerminal shared] collectPaymentMethod:createResult delegate:self completion:^(SCPPaymentIntent *collectResult, NSError *collectError) {
                if (collectError) {
                    NSLog(@"collectPaymentMethod failed: %@", collectError);
                }
                else {
                    NSLog(@"collectPaymentMethod succeeded");
                    // ... Process the payment
                }
            }];
        }
    }];
}

#pragma mark - SCPReaderDisplayDelegate

- (void)terminal:(SCPTerminal *)terminal didRequestReaderInput:(SCPReaderInputOptions)inputOptions {
    self.readerMessageLabel.text = [SCPTerminal stringFromReaderInputOptions:inputOptions];
}

- (void)terminal:(SCPTerminal *)terminal didRequestReaderDisplayMessage:(SCPReaderDisplayMessage)displayMessage {
    self.readerMessageLabel.text = [SCPTerminal stringFromReaderDisplayMessage:displayMessage];
}
)
      # Set your secret key. Remember to switch to your live secret key in production!
# See your keys here: https://dashboard.stripe.com/account/apikeys


#import "APPPaymentViewController.h"
#import <StripeTerminal/StripeTerminal.h>

@interface APPPaymentViewController () <SCPReaderDisplayDelegate>

// Label for displaying messages from the card reader
@property (nonatomic, nullable, strong) UILabel *readerMessageLabel;
@property (nonatomic, nullable, strong) SCPCancelable *collectCancelable;

@end

@implementation APPPaymentViewController

// ...

// Action for a "Checkout" button
- (void)checkoutAction {
    SCPPaymentIntentParameters *params = [[SCPPaymentIntentParameters alloc] initWithAmount:1000
                                                                                   currency:@"usd"];
    [[SCPTerminal shared] createPaymentIntent:params completion:^(SCPPaymentIntent *createResult, NSError *createError) {
        if (createError) {
            NSLog(@"createPaymentIntent failed: %@", createError);
        } else {
            NSLog(@"createPaymentIntent succeeded");
            self.collectCancelable = [[SCPTerminal shared] collectPaymentMethod:createResult delegate:self completion:^(SCPPaymentIntent *collectResult, NSError *collectError) {
                if (collectError) {
                    NSLog(@"collectPaymentMethod failed: %@", collectError);
                }
                else {
                    NSLog(@"collectPaymentMethod succeeded");
                    // ... Process the payment
                }
            }];
        }
    }];
}

#pragma mark - SCPReaderDisplayDelegate

- (void)terminal:(SCPTerminal *)terminal didRequestReaderInput:(SCPReaderInputOptions)inputOptions {
    self.readerMessageLabel.text = [SCPTerminal stringFromReaderInputOptions:inputOptions];
}

- (void)terminal:(SCPTerminal *)terminal didRequestReaderDisplayMessage:(SCPReaderDisplayMessage)displayMessage {
    self.readerMessageLabel.text = [SCPTerminal stringFromReaderDisplayMessage:displayMessage];
}
)
